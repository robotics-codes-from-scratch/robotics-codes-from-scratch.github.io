<!doctype html>
<html lang='en'>
<head>
<meta charset='utf-8'>
<meta name='viewport' content='width=device-width, initial-scale=1'>
<meta name='description' content='Robotics codes from scratch (RCFS) is a collection of source codes to study and test learning and optimization problems in robotics through simple 2D examples.'>
<meta name='keywords' content='robotics codes, robotics tutorial, rcfs, robotics from scratch'>
<meta name='author' content='Sylvain Calinon'>
<link rel='icon' href='images/favicon.ico' sizes='any'>
<link rel='icon' href='images/favicon.svg' type='image/svg+xml'>

<title>Robotics codes from scratch</title>
<link rel='canonical' href='https://robotics-codes-from-scratch.github.io/'>

<link rel='stylesheet' href='https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css' integrity='sha384-Zenh87qX5JnK2Jl0vWa8Ck2rdkQ2Bzep5IDxbcnCeuOxjzrPF/et3URy9Bv1WTRi' crossorigin='anonymous'>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.9.1/font/bootstrap-icons.css">

<link rel='stylesheet' href='https://fonts.googleapis.com/css?family=Permanent+Marker|Raleway'>


<script defer src='https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/js/bootstrap.bundle.min.js' integrity='sha384-OERcA2EqjJCMA+/3y+gxIOqMEjwtxJY7qPCqsdltbNJuaOe923+mo//f6V8Qbsw3' crossorigin='anonymous'></script>


<link rel='stylesheet' href='https://cdn.jsdelivr.net/npm/katex@0.16.2/dist/katex.min.css' integrity='sha384-bYdxxUwYipFNohQlHt0bjN/LCpueqWz13HufFEV1SUatKs1cm4L6fFgCi1jT643X' crossorigin='anonymous'>
<script defer src='https://cdn.jsdelivr.net/npm/katex@0.16.2/dist/katex.min.js' integrity='sha384-Qsn9KnoKISj6dI8g7p1HBlNpVx0I8p1SvlwOldgi3IorMle61nQy4zEahWYtljaz' crossorigin='anonymous'></script>
<script defer src='https://cdn.jsdelivr.net/npm/katex@0.16.2/dist/contrib/auto-render.min.js' integrity='sha384-+VBxd3r6XgURycqtZ117nYw44OOcIax56Z4dCRWbxyPt0Koah1uHoK0o4+/RRE05' crossorigin='anonymous'></script>
<script>
let macros = {
	'\\tp': '\\text{\\tiny{#1}}',
	'\\trsp' : '\\top',
	'\\psin' : '\\dagger',
	'\\eqref': '\\href{###1}{(\\text{#1})}',
	'\\ref': '\\href{###1}{\\text{#1}}',
	'\\label': '\\htmlId{#1}{}'
};
document.addEventListener('DOMContentLoaded', function() {
	renderMathInElement(document.body, {
		// customised options
		trust: (context) => ['\\htmlId', '\\href'].includes(context.command),
		macros: macros,
		// • auto-render specific keys, e.g.:
		delimiters: [
			{left: '$$', right: '$$', display: true},
			{left: '$', right: '$', display: false},
			{left: '\\(', right: '\\)', display: false},
			{left: '\\begin{equation}', right: '\\end{equation}', display: true},
			{left: '\\begin{equation*}', right: '\\end{equation*}', display: true},
			{left: '\\begin{align}', right: '\\end{align}', display: true},
			{left: '\\begin{align*}', right: '\\end{align*}', display: true},
			{left: '\\begin{alignat}', right: '\\end{alignat}', display: true},
			{left: '\\begin{gather}', right: '\\end{gather}', display: true},
			{left: '\\begin{CD}', right: '\\end{CD}', display: true},
			{left: '\\[', right: '\\]', display: true}
		],
		// • rendering keys, e.g.:
		throwOnError : false
	});
});
</script>
	
<!--<script src='https://cdn.jsdelivr.net/npm/chart.js'></script>-->

<!-- <script defer src='https://hypothes.is/embed.js' async></script> --> <!-- pyscript.css is incompatible with hypothes.is/embed.js-->



<script defer src='https://pyscript.net/latest/pyscript.js'></script>
	
<py-config type='toml'>
	packages = ['numpy', 'matplotlib']
</py-config>
		
<link rel='stylesheet' href='https://pyscript.net/latest/pyscript.css'> <!-- pyscript.css is incompatible with hypothes.is/embed.js-->
	
<link rel='stylesheet' href='css/sidebars.css'> <!-- main navigation menu -->
<link rel='stylesheet' href='css/main-template.css'>

</head>

<body>

<nav class='navbar fixed-top' aria-label='Light offcanvas navbar' style='width: 50px;'>
<div class='container-fluid'>
<button class='navbar-toggler' type='button' data-bs-toggle='offcanvas' data-bs-target='#offcanvasNavbarLight' aria-controls='offcanvasNavbarLight'> 
<span class='navbar-toggler-icon' style='cursor: pointer;'></span>
</button>
<!--<a class='navbar-brand' href='#'><h4>Movement primitives</h4></a>-->    
  
  <div class='offcanvas offcanvas-start' tabindex='-1' id='offcanvasNavbarLight' aria-labelledby='offcanvasNavbarLightLabel' style='width: 500px;'>
    <div class='offcanvas-header'><!--style='height: 50px;'-->
      <a class='navbar-brand' href='index.htm'><h4 class='offcanvas-title' id='offcanvasNavbarLightLabel'><i class='bi bi-robot'></i> <i class='bi bi-code-slash'></i> RCFS</h4></a>
      <button type='button' class='btn-close' data-bs-dismiss='offcanvas' aria-label='Close'></button>
    </div>
    
    <div class='offcanvas-body'>
	<ul class='list-unstyled ps-0'>
	  
	  <!--<li><a href='index.htm' class='link-dark d-inline-flex text-decoration-none rounded'>Home</a></li>-->
	  
	  <li class='border-top my-1'></li>
	  
	  <li class='mb-1'>
		<button class='btn btn-toggle d-inline-flex align-items-center rounded border-0 collapsed' data-bs-toggle='collapse' data-bs-target='#sandboxes-collapse' aria-expanded='true'>Sandboxes</button>
		<div class='collapse show' id='sandboxes-collapse'>
		  <ul class='btn-toggle-nav list-unstyled fw-normal pb-1 small'>
		  	<li><a href='sandbox_FK.htm' class='link-dark d-inline-flex text-decoration-none rounded'>
			<div class='p-1 mb-0'>Forward kinematics (FK)</div></a></li>
		    <li><a href='sandbox_IK.htm' class='link-dark d-inline-flex text-decoration-none rounded'>
			<div class='p-1 mb-0'>Inverse kinematics (IK)</div></a></li>
			<li><a href='sandbox_bimanual.htm' class='link-dark d-inline-flex text-decoration-none rounded'>
			<div class='p-1 mb-0'>Bimanual robot</div></a></li>
			<li><a href='sandbox_humanoid.htm' class='link-dark d-inline-flex text-decoration-none rounded'>
			<div class='p-1 mb-0'>Humanoid robot (CoM and coordination matrix)</div></a></li>
		    <li><a href='sandbox_iLQR.htm' class='link-dark d-inline-flex text-decoration-none rounded'>
		    <div class='p-1 mb-0'>Iterative linear quadratic regulator (iLQR)</div></a></li>
		  </ul>
		</div>
	  </li>
	  
	  <li class='border-top my-1'></li>
	  
	  <li class='mb-1'>
		<button class='btn btn-toggle d-inline-flex align-items-center rounded border-0 collapsed' data-bs-toggle='collapse' data-bs-target='#exercises-collapse' aria-expanded='true'>Exercises</button>
		<div class='collapse show' id='exercises-collapse'>
		  <ul class='btn-toggle-nav list-unstyled fw-normal pb-1 small'>
		    <li><a href='exercise01.htm' class='link-dark d-inline-flex text-decoration-none rounded'>
			<div class='p-1 mb-0 bg-dark text-white font-monospace'>01</div>
			<div class='p-1 mb-0'>Linear algebra in Python</div></a></li>
		    <li><a href='exercise02.htm' class='link-dark d-inline-flex text-decoration-none rounded'>
		    <div class='p-1 mb-0 bg-dark text-white font-monospace'>02</div>
			<div class='p-1 mb-0'>Movement primitives and Newton's method</div></a></li>
			<li><a href='exercise03.htm' class='link-dark d-inline-flex text-decoration-none rounded'>
		    <div class='p-1 mb-0 bg-dark text-white font-monospace'>03</div>
			<div class='p-1 mb-0'>Gaussian Distributions</div></a></li>
			<li><a href='exercise04a.htm' class='link-dark d-inline-flex text-decoration-none rounded'>
		    <div class='p-1 mb-0 bg-dark text-white font-monospace'>4a</div>
			<div class='p-1 mb-0'>Forward kinematics</div></a></li>
			<li><a href='exercise04b.htm' class='link-dark d-inline-flex text-decoration-none rounded'>
		    <div class='p-1 mb-0 bg-dark text-white font-monospace'>4b</div>
			<div class='p-1 mb-0'>Inverse kinematics and nullspace control</div></a></li>
			<li><a href='exercise05a.htm' class='link-dark d-inline-flex text-decoration-none rounded'>
		    <div class='p-1 mb-0 bg-dark text-white font-monospace'>5a</div>
			<div class='p-1 mb-0'>Forward dynamics</div></a></li>
			<li><a href='exercise05b.htm' class='link-dark d-inline-flex text-decoration-none rounded'>
		    <div class='p-1 mb-0 bg-dark text-white font-monospace'>5b</div>
			<div class='p-1 mb-0'>Inverse dynamics and impedance control</div></a></li>
			<li><a href='exercise06a.htm' class='link-dark d-inline-flex text-decoration-none rounded'>
		    <div class='p-1 mb-0 bg-dark text-white font-monospace'>6a</div>
			<div class='p-1 mb-0'>Planning with linear quadratic regulator (LQR)</div></a></li>
			<li><a href='exercise06b.htm' class='link-dark d-inline-flex text-decoration-none rounded'>
		    <div class='p-1 mb-0 bg-dark text-white font-monospace'>6b</div>
			<div class='p-1 mb-0'>Planning in joint space with LQR</div></a></li>
			<li><a href='exercise07.htm' class='link-dark d-inline-flex text-decoration-none rounded'>
		    <div class='p-1 mb-0 bg-dark text-white font-monospace'>07</div>
			<div class='p-1 mb-0'>Iterative linear quadratic regulator (iLQR)</div></a></li>
		  </ul>
		</div>
	  </li>
	  
	</ul>
    </div> <!--offcanvas-body-->
    
  </div> <!--offcanvas-->
</div> <!--container-fluid-->
</nav>

<!-- <iframe enable-annotation></iframe> -->

<div class='container-fluid'>


<!--
<style>
code {
  font-family: Consolas,'courier new';
  color: black;
  background-color: #f1f1f1;
  padding: 2px;
  font-size: 100%;
}
</style>
-->

<script>
function clearMsgs() {
  const el = document.getElementById('errors');
  el.innerText = '';
  //console.log('event!');
}
function clearMsgsOutput() {
  const el = document.getElementById('output');
  el.innerText = '';
  //console.log('event!');
}
const colors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b','#e377c2', '#7f7f7f', '#bcbd22', '#17becf'];
</script>

<!-- Template for nav tab question-answer -->
<!-- <ul class="nav nav-tabs" id="myTab" role="tablist">
	<li class="nav-item" role="presentation">
	  <button class="nav-link active" id="question-tab" data-bs-toggle="tab" data-bs-target="#question-tab-pane" type="button" role="tab" aria-controls="question-tab-pane" aria-selected="true">Question</button>
	</li>
	<li class="nav-item" role="presentation">
	  <button class="nav-link" id="answer-tab" data-bs-toggle="tab" data-bs-target="#answer-tab-pane" type="button" role="tab" aria-controls="answer-tab-pane" aria-selected="false">Answer</button>
	</li>
  </ul>
  <div class="tab-content" id="myTabContent">
	<div class="tab-pane fade show active" id="question-tab-pane" role="tabpanel" aria-labelledby="question-tab" tabindex="0">
		<py-repl std-out='output' std-err='errors'>
			</py-repl>
	</div>
	<div class="tab-pane fade" id="answer-tab-pane" role="tabpanel" aria-labelledby="answer-tab" tabindex="0">
		<py-repl std-out='output' std-err='errors'>
			</py-repl>
	</div>
  </div> -->

<py-script>
import numpy as np
import matplotlib.pyplot as plt
from js import document
from pyodide.ffi import create_proxy, to_js

def sqrtm(a):
	# Computing diagonalization
	evalues, evectors = np.linalg.eig(a)
	# Ensuring square root matrix exists
	# assert (evalues >= 0).all()
	return evectors @ np.diag(np.sqrt(evalues)) @ np.linalg.inv(evectors)

def plot_gaussian(mu, sigma, ax, dim=None, color='r', alpha=0.5, lw=1, markersize=6, **kwargs):
	nb_segm=24
	mu, sigma = np.array(mu), np.array(sigma)
	t = np.linspace(-np.pi, np.pi, nb_segm)
	R = np.real(sqrtm(1.0 * sigma))
	points = np.einsum('ij,ja->ia', R, np.array([np.cos(t), np.sin(t)])) + mu[:, None]
	center, = ax.plot(mu[0], mu[1], '.', color=color, alpha=alpha)  # Mean
	line, =	ax.plot(points[0], points[1], color=color, linewidth=lw,
				markersize=markersize, **kwargs)  # Contour
	return center, line

def condition_gaussian(x1, slice1, slice2, mu, sigma):
	mu1 = mu[slice1]
	mu2 = mu[slice2]
	sigma11 = sigma[slice1, slice1]
	sigma22 = sigma[slice2, slice2]
	sigma12 = sigma[slice1, slice2]
	sigma11_inv = np.linalg.inv(sigma11)
	mu_C = mu2 + sigma12 @ sigma11_inv @ (x1 - mu1)
	sigma_C = sigma22 - sigma12 @ sigma11_inv @ sigma12
	return mu_C, sigma_C
</py-script>

<div class='row'>
<div class='col-sm-1'> </div>
<div class='col-sm-7'>

<h1>Exercise 3<br>Gaussian Distributions</h1>

<p>Multivariate Gaussian distributions have many computationally favorable properties that have been used extensively in robotics.
In this exercise, we focus on some operations with Gaussian densities that result in another Gaussian density, namely,
linear combination and product of Gaussians. We will see how one can use these operations in regression problems.</p>

<!-- Question 1 -->
<h5>1. Multivariate Gaussian Distribution</h5>

<p>Fill in the code below to implement <code>linear_combination</code> and <code>product_gaussians</code>.</p>

<ul class="nav nav-tabs" id="myTab" role="tablist">
	<li class="nav-item" role="presentation">
	  <button class="nav-link active" id="question-tab" data-bs-toggle="tab" data-bs-target="#question-tab-pane" type="button" role="tab" aria-controls="question-tab-pane" aria-selected="true">Question</button>
	</li>
	<li class="nav-item" role="presentation">
	  <button class="nav-link" id="answer-tab" data-bs-toggle="tab" data-bs-target="#answer-tab-pane" type="button" role="tab" aria-controls="answer-tab-pane" aria-selected="false">Answer</button>
	</li>
  </ul>
  <div class="tab-content" id="myTabContent">
	<div class="tab-pane fade show active" id="question-tab-pane" role="tabpanel" aria-labelledby="question-tab" tabindex="0">
		<py-repl std-out='output' std-err='errors'>
			def gaussian_nD(x, mu, sigma):
			  D = x.shape[0]
			  cons = ((2*np.pi)**(-D/2)) * (np.linalg.det(sigma)**(-0.5))
			  return cons*np.exp(-0.5*(x-mu).dot(np.linalg.inv(sigma))@ (x-mu))
			
			def linear_combination(A1, A2, c, mu1, mu2, sigma1, sigma2):
			  mu_L = np.zeros(2) # Implement here
			  sigma_L = np.eye(2) # Implement here
			  return mu_L, sigma_L
			
			def product_gaussians(mu1, mu2, sigma1, sigma2):
			  sigma1_inv = np.linalg.inv(sigma1)
			  sigma2_inv = np.linalg.inv(sigma2)
			  sigma_P = np.eye(2)# Implement here
			  mu_P = np.zeros(2) # Implement here
			  c = 0. # Implement here
			  return mu_P, sigma_P, c
			</py-repl>
	</div>
	<div class="tab-pane fade" id="answer-tab-pane" role="tabpanel" aria-labelledby="answer-tab" tabindex="0">
		<py-repl std-out='output' std-err='errors'>
			def gaussian_nD(x, mu, sigma):
			  D = x.shape[0]
			  cons = ((2*np.pi)**(-D/2)) * (np.linalg.det(sigma)**(-0.5))
			  return cons*np.exp(-0.5*(x-mu).dot(np.linalg.inv(sigma))@ (x-mu))
			
			def linear_combination(A1, A2, c, mu1, mu2, sigma1, sigma2):
			  mu_L = A1 @ mu1 + A2 @ mu2 + c # Implement here
			  sigma_L = A1 @ sigma1 @ A1.T + A2 @ sigma2 @ A2.T # Implement here
			  return mu_L, sigma_L
			
			def product_gaussians(mu1, mu2, sigma1, sigma2):
			  sigma1_inv = np.linalg.inv(sigma1)
			  sigma2_inv = np.linalg.inv(sigma2)
			  sigma_P = np.linalg.inv(sigma1_inv + sigma2_inv) # Implement here
			  mu_P = sigma_P @ (sigma1_inv @ mu1 + sigma2_inv @ mu2) # Implement here
			  c = gaussian_nD(mu1, mu2, sigma1 + sigma2) # Implement here 
			  return mu_P, sigma_P, c
			</py-repl>
	</div>
  </div>

<br>


<p>You have access to a plotting function called <code>plot_gaussian(mu, sigma, ax, dim=None, color='r', alpha=0.5, lw=1, markersize=6, **kwargs)</code>.
 You need to give <code>mu : ndarray(N,) </code>, <code>sigma : ndarray(N,N) </code> and <code>ax : subplot object</code> 
 to the function (you can also give other arguments that matplotlib accepts).</p>

<p>Implement <code>product_gaussians</code> in the code above and run the code below to test your answer. You can verify your answer by clicking on the button below the code.</p>


<py-repl std-out='chart' std-err='errors'>
	mu1 = np.zeros(2)
	mu2 = np.ones(2)
	sigma1 = np.diag([.5,.1])
	sigma2 = np.diag([1,1])
	mu_P, sigma_P, c = product_gaussians(mu1, mu2, sigma1, sigma2)
  
	plt.close('all')
	fig,ax = plt.subplots(figsize=(5,5))
	plot_gaussian(mu1, sigma1, ax, color='r', label='first Gaussian')
	plot_gaussian(mu2, sigma2, ax, color='b', label='second Gaussian')
	plot_gaussian(mu_P, sigma_P, ax, color='k', label='product of Gaussians' )
	ax.legend()
	ax.axis('off')
	ax.set_aspect('equal')
	fig
  </py-repl>  


<div class='col-auto'><button class='btn btn-light btn-sm' data-bs-toggle='collapse' data-bs-target='#answer1' aria-expanded='false' aria-controls='answer1'>Show/hide answer</button></div>
<div  class='collapse' id='answer1'><img src='images/Ex3-1.png'></div>
<br>


<p>Implement <code>linear_combination</code> in the code above and run the code below to test your answer. You can verify your answer by clicking on the button below the code (the plot in the answer is generated with $c=0$).</p>
<py-repl std-out='chart' std-err='errors'>
  mu1 = np.zeros(2)
  mu2 = np.ones(2)
  sigma1 = np.diag([1,1])
  sigma2 = np.diag([1,1])
  A1 = np.diag([1., 1])
  A2 = np.diag([1., 1])
  c  = np.random.randn(2)
  mu_L, sigma_L = linear_combination(A1, A2, c, mu1, mu2, sigma1, sigma2)

  plt.close('all')
  fig,ax = plt.subplots(figsize=(5,5))
  plot_gaussian(mu1, sigma1, ax, color='r', label='first Gaussian')
  plot_gaussian(mu2, sigma2, ax, color='b', label='second Gaussian')
  plot_gaussian(mu_L, sigma_L, ax, color='k', label='Linear combination' )
  ax.legend()
  ax.axis('off')
  fig
</py-repl>
<div class='col-auto'><button class='btn btn-light btn-sm' data-bs-toggle='collapse' data-bs-target='#answer2' aria-expanded='false' aria-controls='answer2'>Show/hide answer</button></div>
<div  class='collapse' id='answer2'><img src='images/Ex3-2.png'></div>
<br>


<!-- Question 2 -->
<h5>2. Fitting a Gaussian distribution to demonstrations</h5>
<p>Given a dataset <code>X</code> with $\bm{X} \in \mathcal{R}^{2\times\mathrm{nb\_data}}$, implement a function <code>fit_gaussian</code> that fits a Gaussian distribution onto this dataset and returns its mean and covariance.</p>
<ul class="nav nav-tabs" id="myTab" role="tablist">
	<li class="nav-item" role="presentation">
	  <button class="nav-link active" id="question2-tab" data-bs-toggle="tab" data-bs-target="#question2-tab-pane" type="button" role="tab" aria-controls="question2-tab-pane" aria-selected="true">Question</button>
	</li>
	<li class="nav-item" role="presentation">
	  <button class="nav-link" id="answer2-tab" data-bs-toggle="tab" data-bs-target="#answer2-tab-pane" type="button" role="tab" aria-controls="answer2-tab-pane" aria-selected="false">Answer</button>
	</li>
  </ul>
  <div class="tab-content" id="myTabContent">
	<div class="tab-pane fade show active" id="question2-tab-pane" role="tabpanel" aria-labelledby="question2-tab" tabindex="0">
		<py-repl std-out='output' std-err='errors'>
			def fit_gaussian(X):
				mu = np.zeros(2) # implement here
				sigma = np.eye(2) # implement here
				return mu, sigma
			</py-repl>
	</div>
	<div class="tab-pane fade" id="answer2-tab-pane" role="tabpanel" aria-labelledby="answer2-tab" tabindex="0">
		<py-repl std-out='output' std-err='errors'>
			def fit_gaussian(X):
				mu = np.mean(X, axis=-1) # implement here
				sigma = (X-mu[:,None]).dot((X-mu[:,None]).T)/nb_data # implement here
				return mu, sigma
		</py-repl>
	</div>
  </div> 

<br>

 
<p>Verify your function by plotting the resulting Gaussian distribution along with the dataset. To do this, you can run the code below by changing the noise level.
You can also click on the button below to verify your answer (the answer is generated with <code>noise_scale=0.01</code>).</p>

<py-repl std-out='chart' std-err='errors'>
noise_scale = 0.05 # change this to the noise level you want
nb_data = 100
x1 = np.linspace(0,1,nb_data)
y1 = 0.3*x1 + 0.1 + np.random.randn(nb_data)*noise_scale
X1 = np.stack([x1,y1])
mu1, sigma1 = fit_gaussian(X1)

plt.close('all')
fig,ax = plt.subplots(figsize=(5,5))
plot_gaussian(mu1, sigma1, ax=ax)
ax.plot(x1,y1, '.')
ax.set_xlabel('x')
ax.set_ylabel('y')
fig.tight_layout()
fig
</py-repl>
<div class='col-auto'><button class='btn btn-light btn-sm' data-bs-toggle='collapse' data-bs-target='#answer3' aria-expanded='false' aria-controls='answer3'>Show/hide answer</button></div>
<div  class='collapse' id='answer3'><img src='images/Ex3-3.png'></div>
<br>


<!-- Question 3 -->
<h5>3. Intersection or union?</h5>

<p>We are given two different sets of demonstration data, each represented by a Gaussian distribution. Depending on the application, we may be interested
only in capturing the common parts in both demonstrations, which we will call <em>intersection</em>, or capturing both demonstration datasets together, 
which we will call <em>union</em>. Intersection and union correspond to the functions that we implemented in this session. 
Which ones do you think fit to these specifications?</p>

<ul class="nav nav-tabs" id="myTab" role="tablist">
	<li class="nav-item" role="presentation">
	  <button class="nav-link active" id="question3-tab" data-bs-toggle="tab" data-bs-target="#question3-tab-pane" type="button" role="tab" aria-controls="question3-tab-pane" aria-selected="true">Question</button>
	</li>
	<li class="nav-item" role="presentation">
	  <button class="nav-link" id="answer3-tab" data-bs-toggle="tab" data-bs-target="#answer3-tab-pane" type="button" role="tab" aria-controls="answer3-tab-pane" aria-selected="false">Answer</button>
	</li>
  </ul>
  <div class="tab-content" id="myTabContent">
	<div class="tab-pane fade show active" id="question3-tab-pane" role="tabpanel" aria-labelledby="question3-tab" tabindex="0">
		<py-repl std-out='output' std-err='errors'>
			# Create a new dataset X2
			x2 = np.linspace(0,1,nb_data)
			y2 = 1.5*x2 + np.random.randn(nb_data)*noise_scale
			X2 = np.stack([x2,y2])
			
			# Fit another Gaussian distribution
			mu2, sigma2 = fit_gaussian(X2)
			
			# Compute the resulting Gaussian for the intersection case
			mu_intersection, sigma_intersection = np.zeros(2), np.eye(2) # implement here
			
			# Compute the resulting Gaussian for the union case
			mu_union, sigma_union = np.zeros(2), np.eye(2) # implement here
			</py-repl>
	</div>
	<div class="tab-pane fade" id="answer3-tab-pane" role="tabpanel" aria-labelledby="answer3-tab" tabindex="0">
		<py-repl std-out='output' std-err='errors'>
			# Create a new dataset X2
			x2 = np.linspace(0,1,nb_data)
			y2 = 1.5*x2 + np.random.randn(nb_data)*noise_scale
			X2 = np.stack([x2,y2])
			
			# Fit another Gaussian distribution
			mu2, sigma2 = fit_gaussian(X2)
			
			# Compute the resulting Gaussian for the intersection case
			mu_intersection, sigma_intersection, c = product_gaussians(mu1, mu2, sigma1, sigma2) # implement here
			# Compute the resulting Gaussian for the union case
			mu_union, sigma_union = fit_gaussian(np.concatenate([X1, X2], axis=-1)) # implement here
			</py-repl>
	</div>
  </div> 


<br>


<p>Plot these Gaussian distributions to verify your results with the button below.</p>

<py-repl std-out='chart' std-err='errors'>
plt.close('all')
fig,ax = plt.subplots(figsize=(5,5))
plot_gaussian(mu2, sigma2, ax, color='b', label='2nd demo')
plot_gaussian(mu1, sigma1, ax, color='orange', label='1st demo')
plot_gaussian(mu_intersection, sigma_intersection, ax, color='k', label='intersection')	
plot_gaussian(mu_union, sigma_union, ax, color='g', label='union')

ax.legend()
ax.plot(x2,y2, '.')
ax.plot(x1,y1, '.')
ax.set_xlabel('x')
ax.set_ylabel('y')
fig.tight_layout()
fig
</py-repl>
<div class='col-auto'><button class='btn btn-light btn-sm' data-bs-toggle='collapse' data-bs-target='#answer4' aria-expanded='false' aria-controls='answer4'>Show/hide answer</button></div>
<div  class='collapse' id='answer4'><img src='images/Ex3-4.png'></div>
<br>

<p>Now consider the case where our coordinate system is rotated $\pi/3$ radians counterclockwise, which also rotated our dataset. Instead of refitting a distribution onto this new rotated dataset, we would like to reuse the <code>mu_union, sigma_union</code> and <code>mu_intersection, sigma_intersection</code> and the rotation matrix <code>R</code> to encode our new rotated dataset.</p>
<p>One function implemented in this section can accomplish this. Call this function with the appropriate arguments and plot the results. You can verify your answer with the button below the code (that you can also use as a hint).</p>

<ul class="nav nav-tabs" id="myTab" role="tablist">
	<li class="nav-item" role="presentation">
	  <button class="nav-link active" id="question4-tab" data-bs-toggle="tab" data-bs-target="#question4-tab-pane" type="button" role="tab" aria-controls="question4-tab-pane" aria-selected="true">Question</button>
	</li>
	<li class="nav-item" role="presentation">
	  <button class="nav-link" id="answer4-tab" data-bs-toggle="tab" data-bs-target="#answer4-tab-pane" type="button" role="tab" aria-controls="answer4-tab-pane" aria-selected="false">Answer</button>
	</li>
  </ul>
  <div class="tab-content" id="myTabContent">
	<div class="tab-pane fade show active" id="question4-tab-pane" role="tabpanel" aria-labelledby="question2-tab" tabindex="0">
		<py-repl std-out='chart' std-err='errors'>
			angle = np.pi/3
			R = np.array([[np.cos(angle), -np.sin(angle)],
						  [np.sin(angle), np.cos(angle)]])
			
			# Find mu_rotated and sigma_rotated without refitting.
			mu_intersection_rotated, sigma_intersection_rotated = np.zeros(2), np.eye(2) #implement here
			mu_union_rotated, sigma_union_rotated = np.zeros(2), np.eye(2) #implement here
		
			# Plotting 
			plt.close('all')
			fig,ax = plt.subplots(figsize=(5,5))
			plot_gaussian(mu_intersection, sigma_intersection, ax=ax, color='k', label='intersection')
			plot_gaussian(mu_intersection_rotated, sigma_intersection_rotated, ax=ax, color='gray', label='intersection rotated')
			plot_gaussian(mu_union, sigma_union, ax, color='g', label='union')
			plot_gaussian(mu_union_rotated, sigma_union_rotated, ax=ax, color='g', alpha=0.7, label='union rotated')
			
			X2_rotated = R @ X2
			X1_rotated = R @ X1
			ax.plot(x2,y2, 'r.', alpha=0.1)
			ax.plot(x1,y1, 'b.', alpha=0.1)
			ax.plot(X2_rotated[0],X2_rotated[1], 'r.', alpha=0.1)
			ax.plot(X1_rotated[0],X1_rotated[1], 'b.', alpha=0.1)
			ax.set_xlabel('x')
			ax.set_ylabel('y')
			ax.legend()
			fig.tight_layout()
			fig
		</py-repl>
	</div>
	<div class="tab-pane fade" id="answer4-tab-pane" role="tabpanel" aria-labelledby="answer4-tab" tabindex="0">
		<py-repl std-out='chart' std-err='errors'>
			angle = np.pi/3
			R = np.array([[np.cos(angle), -np.sin(angle)],
						  [np.sin(angle), np.cos(angle)]])
			
			# Find mu_rotated and sigma_rotated without refitting.
			mu_intersection_rotated, sigma_intersection_rotated = linear_combination(R, R*0, 0, mu_intersection, mu_intersection, sigma_intersection, sigma_intersection) #implement here
			mu_union_rotated, sigma_union_rotated = linear_combination(R, R*0, 0, mu_union, mu_union, sigma_union, sigma_union) #implement here

		
			# Plotting 
			plt.close('all')
			fig,ax = plt.subplots(figsize=(5,5))
			plot_gaussian(mu_intersection, sigma_intersection, ax=ax, color='k', label='intersection')
			plot_gaussian(mu_intersection_rotated, sigma_intersection_rotated, ax=ax, color='gray', label='intersection rotated')
			plot_gaussian(mu_union, sigma_union, ax, color='g', label='union')
			plot_gaussian(mu_union_rotated, sigma_union_rotated, ax=ax, color='g', alpha=0.7, label='union rotated')
			
			X2_rotated = R @ X2
			X1_rotated = R @ X1
			ax.plot(x2,y2, 'r.', alpha=0.1)
			ax.plot(x1,y1, 'b.', alpha=0.1)
			ax.plot(X2_rotated[0],X2_rotated[1], 'r.', alpha=0.1)
			ax.plot(X1_rotated[0],X1_rotated[1], 'b.', alpha=0.1)
			ax.set_xlabel('x')
			ax.set_ylabel('y')
			ax.legend()
			fig.tight_layout()
			fig
		</py-repl>
	</div>
  </div> 

<div class='col-auto'><button class='btn btn-light btn-sm' data-bs-toggle='collapse' data-bs-target='#answer5' aria-expanded='false' aria-controls='answer5'>Show/hide answer</button></div>
<div class='collapse' id='answer5'><img src='images/Ex3-5.png'></div>
<br>

</div> <!-- col-sm-7 -->

<div class='col-sm-4' id='div1'>

<div class='sticky-sm-top' style='padding: 2rem 1rem 1rem 1rem;'>
<hr>

<div class='row justify-content-between'>
<div class='col-auto'><button class='btn btn-light btn-sm' disabled>Output</button></div>
<div class='col-auto'><button class='btn btn-outline-secondary btn-sm float-right' onclick='clearMsgsOutput()'>Clear</button></div>
</div>
<div id='output'></div>
<hr>

<div class='row justify-content-between'>
<div class='col-auto'><button class='btn btn-light btn-sm' disabled>Error</button></div>
<div class='col-auto'><button class='btn btn-outline-secondary btn-sm float-right' onclick='clearMsgs()'>Clear</button></div>
</div>
<div id='errors'></div>
<hr>

<div id='chart'></div>

</div>


</div> <!-- col-sm-4 -->
</div> <!-- row -->

</div> <!--container-->
</body>
</html>

