<!doctype html>
<html lang='en'>
<head>
<meta charset='utf-8'>
<meta name='viewport' content='width=device-width, initial-scale=1'>
<meta name='description' content='Robotics codes from scratch (RCFS) is a collection of source codes to study and test learning and optimization problems in robotics through simple 2D examples.'>
<meta name='keywords' content='robotics codes, robotics tutorial, rcfs, robotics from scratch'>
<meta name='author' content='Sylvain Calinon'>
<link rel='icon' href='images/favicon.ico' sizes='any'>
<link rel='icon' href='images/favicon.svg' type='image/svg+xml'>

<title>Robotics codes from scratch</title>
<link rel='canonical' href='https://robotics-codes-from-scratch.github.io/'>

<link rel='stylesheet' href='https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css' integrity='sha384-Zenh87qX5JnK2Jl0vWa8Ck2rdkQ2Bzep5IDxbcnCeuOxjzrPF/et3URy9Bv1WTRi' crossorigin='anonymous'>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.9.1/font/bootstrap-icons.css">

<link rel='stylesheet' href='https://fonts.googleapis.com/css?family=Permanent+Marker|Raleway'>


<script defer src='https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/js/bootstrap.bundle.min.js' integrity='sha384-OERcA2EqjJCMA+/3y+gxIOqMEjwtxJY7qPCqsdltbNJuaOe923+mo//f6V8Qbsw3' crossorigin='anonymous'></script>


<!--<script src='https://cdn.jsdelivr.net/npm/chart.js'></script>-->

<!-- <script defer src='https://hypothes.is/embed.js' async></script> --> <!-- pyscript.css is incompatible with hypothes.is/embed.js-->



<script defer src='https://pyscript.net/latest/pyscript.js'></script>
	
<py-config type='toml'>
	packages = ['numpy']
</py-config>
		
<link rel='stylesheet' href='https://pyscript.net/latest/pyscript.css'> <!-- pyscript.css is incompatible with hypothes.is/embed.js-->
	
<link rel='stylesheet' href='css/sidebars.css'> <!-- main navigation menu -->
<link rel='stylesheet' href='css/main-template.css'>

</head>

<body>

<nav class='navbar fixed-top' aria-label='Light offcanvas navbar' style='width: 50px;'>
<div class='container-fluid'>
<button class='navbar-toggler' type='button' data-bs-toggle='offcanvas' data-bs-target='#offcanvasNavbarLight' aria-controls='offcanvasNavbarLight'> 
<span class='navbar-toggler-icon' style='cursor: pointer;'></span>
</button>
<!--<a class='navbar-brand' href='#'><h4>Movement primitives</h4></a>-->    
  
  <div class='offcanvas offcanvas-start' tabindex='-1' id='offcanvasNavbarLight' aria-labelledby='offcanvasNavbarLightLabel' style='width: 500px;'>
    <div class='offcanvas-header'><!--style='height: 50px;'-->
      <a class='navbar-brand' href='index.htm'><h4 class='offcanvas-title' id='offcanvasNavbarLightLabel'><i class='bi bi-robot'></i> <i class='bi bi-code-slash'></i> RCFS</h4></a>
      <button type='button' class='btn-close' data-bs-dismiss='offcanvas' aria-label='Close'></button>
    </div>
    
    <div class='offcanvas-body'>
	<ul class='list-unstyled ps-0'>
	  
	  <!--<li><a href='index.htm' class='link-dark d-inline-flex text-decoration-none rounded'>Home</a></li>-->
	  
	  <li class='border-top my-1'></li>
	  
	  <li class='mb-1'>
		<button class='btn btn-toggle d-inline-flex align-items-center rounded border-0 collapsed' data-bs-toggle='collapse' data-bs-target='#sandboxes-collapse' aria-expanded='true'>Sandboxes</button>
		<div class='collapse show' id='sandboxes-collapse'>
		  <ul class='btn-toggle-nav list-unstyled fw-normal pb-1 small'>
		  	<li><a href='sandbox_FK.htm' class='link-dark d-inline-flex text-decoration-none rounded'>
			<div class='p-1 mb-0'>Forward kinematics (FK)</div></a></li>
		    <li><a href='sandbox_IK.htm' class='link-dark d-inline-flex text-decoration-none rounded'>
			<div class='p-1 mb-0'>Inverse kinematics (IK)</div></a></li>
			<li><a href='sandbox_bimanual.htm' class='link-dark d-inline-flex text-decoration-none rounded'>
			<div class='p-1 mb-0'>Bimanual robot</div></a></li>
		    <li><a href='sandbox_iLQR.htm' class='link-dark d-inline-flex text-decoration-none rounded'>
		    <div class='p-1 mb-0'>Iterative linear quadratic regulator (iLQR)</div></a></li>
		  </ul>
		</div>
	  </li>
	  
	  <li class='border-top my-1'></li>
	  
	  <li class='mb-1'>
		<button class='btn btn-toggle d-inline-flex align-items-center rounded border-0 collapsed' data-bs-toggle='collapse' data-bs-target='#exercises-collapse' aria-expanded='true'>Exercises</button>
		<div class='collapse show' id='exercises-collapse'>
		  <ul class='btn-toggle-nav list-unstyled fw-normal pb-1 small'>
		    <li><a href='exercise01.htm' class='link-dark d-inline-flex text-decoration-none rounded'>
			<div class='p-1 mb-0 bg-dark text-white font-monospace'>01</div>
			<div class='p-1 mb-0'>Linear algebra in Python</div></a></li>
		    <li><a href='exercise02.htm' class='link-dark d-inline-flex text-decoration-none rounded'>
		    <div class='p-1 mb-0 bg-dark text-white font-monospace'>02</div>
			<div class='p-1 mb-0'>Movement primitives and Newton's method</div></a></li>
			<li><a href='exercise03.htm' class='link-dark d-inline-flex text-decoration-none rounded'>
		    <div class='p-1 mb-0 bg-dark text-white font-monospace'>03</div>
			<div class='p-1 mb-0'>Gaussian Distributions</div></a></li>
			<li><a href='exercise04a.htm' class='link-dark d-inline-flex text-decoration-none rounded'>
		    <div class='p-1 mb-0 bg-dark text-white font-monospace'>4a</div>
			<div class='p-1 mb-0'>Forward kinematics</div></a></li>
			<li><a href='exercise04b.htm' class='link-dark d-inline-flex text-decoration-none rounded'>
		    <div class='p-1 mb-0 bg-dark text-white font-monospace'>4b</div>
			<div class='p-1 mb-0'>Inverse kinematics and nullspace control</div></a></li>
			<li><a href='exercise05a.htm' class='link-dark d-inline-flex text-decoration-none rounded'>
		    <div class='p-1 mb-0 bg-dark text-white font-monospace'>5a</div>
			<div class='p-1 mb-0'>Forward dynamics</div></a></li>
			<li><a href='exercise05b.htm' class='link-dark d-inline-flex text-decoration-none rounded'>
		    <div class='p-1 mb-0 bg-dark text-white font-monospace'>5b</div>
			<div class='p-1 mb-0'>Inverse dynamics and impedance control</div></a></li>
			<li><a href='exercise06a.htm' class='link-dark d-inline-flex text-decoration-none rounded'>
		    <div class='p-1 mb-0 bg-dark text-white font-monospace'>6a</div>
			<div class='p-1 mb-0'>Planning with linear quadratic regulator (LQR)</div></a></li>
			<li><a href='exercise06b.htm' class='link-dark d-inline-flex text-decoration-none rounded'>
		    <div class='p-1 mb-0 bg-dark text-white font-monospace'>6b</div>
			<div class='p-1 mb-0'>Planning in joint space with LQR</div></a></li>
		  </ul>
		</div>
	  </li>
	  
	</ul>
    </div> <!--offcanvas-body-->
    
  </div> <!--offcanvas-->
</div> <!--container-fluid-->
</nav>

<!-- <iframe enable-annotation></iframe> -->

<div class='container-fluid'>


<script>
function clearMsgs() {
  const el = document.getElementById('errors');
  el.innerText = '';
  //console.log('event!');
}
function clearMsgsOutput() {
  const el = document.getElementById('output');
  el.innerText = '';
  //console.log('event!');
}
const colors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b','#e377c2', '#7f7f7f', '#bcbd22', '#17becf'];
</script>

<div class='row'>
<div class='col-sm-1'></div>
<div class='col-sm-7'>

<h1>Exercise 4.a<br>Forward kinematics</h1>

<p>Forward kinematics is the problem of finding the pose of the robot given a configuration (joint angles). You can read about forward kinematics in Section 4 of the <a href='doc/rcfs.pdf' target='_blank'>RCFS documentation</a>.</p>
<p>The goal of this exercise is to implement a forward kinematics function for the manipulator shown on the right. The pink circle will be used to represent the end-effector of the robot.</p>
<p>If the forward kinematics function is correctly implemented, this pink circle should coincide with the end-effector of the robot. You can move the robot joints by hovering the mouse over each joint and using the mousewheel and/or the touchpad.</p>
<p>The function <code>fkin</code> represents the forward kinematics function taking the current joint angles <code>x</code> and problem parameters class <code>param</code> as inputs and outputs a 2 dimensional vector representing the 2D position of the end-effector.
Currently, <code>f=np.zeros(2)</code> and if you run the code in the Question tab, you will see that the pink object appears at the base of the robot, at coordinates (0,0).</p>
<p>Note that the <code>param</code> class has attributes such as the number of joints (<code>param.nbVarX</code>) and the link lengths (<code>param.l</code>) that you can use to test your code.</p>

<ul class='list-group list-group-numbered'>

<li class='list-group-item'>
Change this function to implement forward kinematics. 
</li>

<li class='list-group-item'>
Verify your code by changing the number of joints and the link lengths. 
</li>

</ul><br>

<ul class='nav nav-tabs' id='myTab' role='tablist'>
<li class='nav-item' role='presentation'><button class='nav-link active' id='question4-tab' data-bs-toggle='tab' data-bs-target='#question4-tab-pane' type='button' role='tab' aria-controls='question4-tab-pane' aria-selected='true'>Question</button>
</li>
<li class='nav-item' role='presentation'><button class='nav-link' id='answer4-tab' data-bs-toggle='tab' data-bs-target='#answer4-tab-pane' type='button' role='tab' aria-controls='answer4-tab-pane' aria-selected='false'>Answer</button>
</li>
</ul>
<div class='tab-content' id='myTabContent'>
<div class='tab-pane fade show active' id='question4-tab-pane' role='tabpanel' aria-labelledby='question4-tab' tabindex='0'>
	<py-repl std-out='output' std-err='errors'>
	param.nbVarX = 3 # State space dimension (x1,x2,x3)
	param.l = np.ones(param.nbVarX) * 800 / param.nbVarX # Robot links lengths
	x = -np.ones(param.nbVarX) * np.pi / param.nbVarX # Initial robot state
	x[0] = x[0] + np.pi
	
	# Forward kinematics for end-effector (in robot coordinate system)
	def fkin(x, param):
	  f = np.zeros(2)
	  return f
	</py-repl> 
</div>
<div class='tab-pane fade' id='answer4-tab-pane' role='tabpanel' aria-labelledby='answer4-tab' tabindex='0'>
	<py-repl std-out='output' std-err='errors'>
	param.nbVarX = 3 # State space dimension (x1,x2,x3)
	param.l = np.ones(param.nbVarX) * 800 / param.nbVarX # Robot links lengths
	x = -np.ones(param.nbVarX) * np.pi / param.nbVarX # Initial robot state
	x[0] = x[0] + np.pi
	
	# Forward kinematics for end-effector (in robot coordinate system)
	def fkin(x, param):
	  L = np.tril(np.ones([param.nbVarX, param.nbVarX]))
	  f = np.array([param.l @ np.cos(L @ x), param.l @ np.sin(L @ x)])
	  return f
	</py-repl> 
</div>
</div>

<br><br>

<!-- <p id='repl-out' style='font-size: 70%; color: #777777;'>(press shift+enter or click on the green run button to run the code)</p>
<p id='repl-err' style='font-size: 70%; color: #880000;'></p> -->

</div> <!--sm-7-->

<div class='col-sm-4'>
	<div class='sticky-sm-top' style='padding: 2rem 1rem 1rem 1rem;'>
	<hr>
	<div class='row justify-content-between'>
	<div class='col-auto'><button class='btn btn-light btn-sm' disabled>Output</button></div>
	<div class='col-auto'><button class='btn btn-outline-secondary btn-sm float-right' onclick='clearMsgsOutput()'>Clear</button></div>
	</div>
	<div id='output'></div>
	<hr>
	<div class='row justify-content-between'>
	<div class='col-auto'><button class='btn btn-light btn-sm' disabled>Error</button></div>
	<div class='col-auto'><button class='btn btn-outline-secondary btn-sm float-right' onclick='clearMsgs()'>Clear</button></div>
	</div>
	<div id='errors'></div>
	<hr>
	<canvas id='canvas' style='width:100%;' width='900px' height='700px'></canvas>
	</div>
</div> <!--sm-4-->

</div> <!--row-->

<py-script>
from pyodide.ffi import create_proxy
from js import Path2D
import numpy as np

# Forward kinematics for end-effector (in robot coordinate system)
def fkin(x, param):
	L = np.tril(np.ones([param.nbVarX, param.nbVarX]))
	f = [param.l @ np.cos(L @ x), param.l @ np.sin(L @ x)] 
	return f

# Forward kinematics for all joints (in robot coordinate system)
def fkin0(x, param): 
	L = np.tril(np.ones([param.nbVarX, param.nbVarX]))
	f = np.vstack([
		L @ np.diag(param.l) @ np.cos(L @ x),
		L @ np.diag(param.l) @ np.sin(L @ x)
	])
	f = np.hstack([np.zeros([2,1]), f])
	return f

## Parameters
# ===============================

param = lambda: None # Lazy way to define an empty class in python
param.nbVarX = 3 # State space dimension (x1,x2,x3)
#param.l = [300, 300, 150] # Robot links lengths
param.l = np.ones(param.nbVarX) * 800 / param.nbVarX # Robot links lengths
		

#########################################################################################

# Mouse events
mouse0 = np.zeros(2)
mousedown = 0
hover_joint = -1

def onMouseMove(event):
	global mouse, mouse0
	offset = canvas.getBoundingClientRect()
	mouse0[0] = (event.clientX - offset.x) * canvas.width / canvas.clientWidth
	mouse0[1] = (event.clientY - offset.y) * canvas.height / canvas.clientHeight

def onTouchMove(event):
	global mouse, mouse0
	offset = event.target.getBoundingClientRect()
	mouse0[0] = (event.touches.item(0).clientX - offset.x) * canvas.width / canvas.clientWidth
	mouse0[1] = (event.touches.item(0).clientY - offset.y) * canvas.height / canvas.clientHeight
	
def onMouseDown(event):
	global mousedown
	mousedown = 1

def onMouseUp(event):
	global mousedown
	mousedown = 0

def onWheel(event):
	global hover_joint, x
	if hover_joint >= 0:
		x[hover_joint] += 0.2 * (event.deltaY/106)

document.addEventListener('mousemove', create_proxy(onMouseMove)) #for standard mouse
document.addEventListener('touchmove', create_proxy(onTouchMove)) #for mobile interfaces

document.addEventListener('mousedown', create_proxy(onMouseDown)) #for standard mouse
#document.addEventListener('pointerdown', create_proxy(onMouseDown)) #for mobile interfaces 
document.addEventListener('touchstart', create_proxy(onMouseDown)) #for mobile interfaces 

document.addEventListener('mouseup', create_proxy(onMouseUp)) #for standard mouse
#document.addEventListener('pointerup', create_proxy(onMouseUp)) #for mobile interfaces 
document.addEventListener('touchend', create_proxy(onMouseUp)) #for mobile interfaces 

document.addEventListener('wheel', create_proxy(onWheel)) #for standard mouse


#########################################################################################

canvas = document.getElementById('canvas')
ctx = canvas.getContext('2d')

def clear_screen():
	ctx.setTransform(1, 0, 0, 1, 0, 0)
	ctx.fillStyle = 'white'
	ctx.fillRect(0, 0, canvas.width, canvas.height)

	
def draw_ground():
	ctx.setTransform(1, 0, 0, -1, canvas.width*0.5, canvas.height*0.9)
	ctx.translate(0, -40)	
	ctx.lineCap = 'round'
	ctx.lineJoin = 'round'
	ctx.lineWidth = '5'
	ctx.strokeStyle = '#CCCCCC'
	ctx.beginPath()
	ctx.moveTo(-400, 0)
	ctx.lineTo(400, 0)
	ctx.stroke()


def draw_robot(x, color):
	global hover_joint
	ctx.setTransform(1, 0, 0, -1, canvas.width*0.5, canvas.height*0.9)
	
	f = fkin0(x, param)
	
	# Draw base
	ctx.translate(f[0,0], f[1,0])
	ctx.lineWidth = '4'
	ctx.strokeStyle = 'white'
	ctx.fillStyle = color
	ctx.beginPath()
	ctx.arc(0, 0, 40, 0, np.pi)
	ctx.rect(-40, 0, 80, -40)
	ctx.fill()
	ctx.strokeStyle = color
	for i in range(5):
		ctx.beginPath()
		ctx.moveTo(-30+i*15, -40)
		ctx.lineTo(-40+i*15, -60)
		ctx.stroke()
		
	# Draw links
	ctx.lineCap = 'round'
	ctx.lineJoin = 'round'
	for i in range(param.nbVarX):
		# Draw links outlines
		ctx.lineWidth = '46'
		ctx.strokeStyle = 'white'
		ctx.beginPath()
		ctx.lineTo(f[0,i], f[1,i])
		ctx.lineTo(f[0,i+1], f[1,i+1])
		ctx.stroke()
		# Draw links
		ctx.lineWidth = '38'
		ctx.strokeStyle = color
		ctx.beginPath()
		ctx.lineTo(f[0,i], f[1,i])
		ctx.lineTo(f[0,i+1], f[1,i+1])
		ctx.stroke()
		
	# Draw articulations
	obj = Path2D.new()
	obj.arc(0, 0, 12, 0, 2*np.pi)
	ctx.lineWidth = '4'
	ctx.strokeStyle = 'white'
	for i in range(param.nbVarX+1):
		ctx.translate(f[0,i], f[1,i])
		ctx.stroke(obj)
		if ctx.isPointInPath(obj, mouse0[0], mouse0[1]):
			hover_joint = i
		ctx.translate(-f[0,i], -f[1,i])


def draw_tip(f, color):
	ctx.setTransform(1, 0, 0, -1, canvas.width*0.5, canvas.height*0.9)
	# Draw object
	obj = Path2D.new()
	obj.arc(0, 0, 16, 0, 2*np.pi)
	ctx.translate(f[0], f[1])
	ctx.fillStyle = color
	ctx.fill(obj)
	

#########################################################################################
 
def errorHandler(e):
	msg = 'Error: ' + str(e)
	console.error(msg)
	el = document.getElementById('errors')
	el.innerText = msg
	#el.textContent = msg
	
#########################################################################################
#x = [3*np.pi/4, -np.pi/2, -np.pi/4] # Initial robot state
x = -np.ones(param.nbVarX) * np.pi / param.nbVarX # Initial robot state
x[0] = x[0] + np.pi

while True:
	
	try:
		f = fkin(x, param)
	except Exception as e:
		errorHandler(e)
		def fkin(x, param):
			f = np.zeros(param.nbVarX)
			return f
	
	# Reinit hovering variables
	hover_joint = -1
	
	# Rendering
	clear_screen()
#	draw_ground()
	draw_robot(x, '#AAAAAA')
	draw_tip(f, '#FF3399')

	await asyncio.sleep(0.01)

</py-script>

</div> <!--container-->
</body>
</html>

