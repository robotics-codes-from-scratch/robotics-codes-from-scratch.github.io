<!doctype html>
<html lang='en'>
<head>
<meta charset='utf-8'>
<meta name='viewport' content='width=device-width, initial-scale=1'>
<meta name='description' content='Robotics codes from scratch (RCFS) is a collection of source codes to study and test learning and optimization problems in robotics through simple 2D examples.'>
<meta name='keywords' content='robotics codes, robotics tutorial, rcfs, robotics from scratch'>
<meta name='author' content='Sylvain Calinon'>
<link rel='icon' href='images/favicon.ico' sizes='any'>
<link rel='icon' href='images/favicon.svg' type='image/svg+xml'>

<title>Robotics codes from scratch</title>
<link rel='canonical' href='https://robotics-codes-from-scratch.github.io/'>

<link rel='stylesheet' href='https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css' integrity='sha384-Zenh87qX5JnK2Jl0vWa8Ck2rdkQ2Bzep5IDxbcnCeuOxjzrPF/et3URy9Bv1WTRi' crossorigin='anonymous'>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.9.1/font/bootstrap-icons.css">

<script defer src='https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/js/bootstrap.bundle.min.js' integrity='sha384-OERcA2EqjJCMA+/3y+gxIOqMEjwtxJY7qPCqsdltbNJuaOe923+mo//f6V8Qbsw3' crossorigin='anonymous'></script>

<script defer src='https://pyscript.net/latest/pyscript.min.js'></script>

<py-config type='toml'>
	packages = ['numpy']
</py-config>
		
<link rel='stylesheet' href='https://pyscript.net/latest/pyscript.css'> 

<link rel='stylesheet' href='https://fonts.googleapis.com/css?family=Permanent+Marker|Raleway'>
<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Pacifico&display=swap">

<script>
const myFont = new FontFace('myFont', 'url(fonts/KaTeX_Math-Italic.woff2)');
myFont.load();
document.fonts.add(myFont);
</script>

</head>

<body>

<div class='container'>

<span style="font-family: Pacifico;">I am used for loading</span><br>
<span style="font-family: Permanent Marker;">I am used for loading</span>
<!--<span style="font-family: myFont;">I am used for loading</span>-->

<canvas id='canvas' style='width:70%;' width='900px' height='600px'></canvas>

<py-script>
from pyodide.ffi import create_proxy
from js import Path2D, document, console, FontFace
import numpy as np

#########################################################################################

canvas = document.getElementById('canvas')
ctx = canvas.getContext('2d')
#myFont = new FontFace('myFont', 'url(fonts/CANDY.TTF)')

car_svg = Path2D.new('m -4.9070956,-15.985104 c -1.103,0 -2,0.897 -2,2 v 0.4375 c 1.328,0.583 2.324,1.721 2.75,3.125 0.167,0.252 0.25,0.6824985 0.25,1.4374985 v 2.0000001 h 2.99999996 v 1 H 1.0929044 v -1 h 2 c 1.103,0 2,-0.897 2,-2.0000001 v -4.9999985 c 0,-1.103 -0.897,-2 -2,-2 z m -6.0000004,4 c -0.552,0 -1,0.448 -1,1 v 22 c 0,0.553 0.448,1 1,1 h 2.0000004 c 1.654,0 3,-1.346 3,-3.0000014 V -8.9851055 c 0,-1.6539985 -1.346,-2.9999985 -3,-2.9999985 z m 44,0 c -0.553,0 -1,0.448 -1,1 v 4.6249986 c 3.242,0.617 5.80475,1.47625 5.96875,1.53125 0.016,0.005 0.01625,0.02625 0.03125,0.03125 v -6.1874986 c 0,-0.552 -0.447,-1 -1,-1 z M 8.0929044,-9.9851045 c -0.351,0 -0.66375,0.198999 -0.84375,0.499999 l -2.71875,4.5000001 h -8.4375 v 10 h 8.4375 l 2.71875,4.5 c 0.18,0.3 0.49275,0.5000004 0.84375,0.5000004 h 6.9999996 c 0.208,0 0.42475,-0.0655 0.59375,-0.1875004 l 6.71875,-4.8125 h 3.6875 c 5.05,0 11.0605,-1.9785 11.3125,-2.0625 0.411,-0.135 0.6875,-0.5055 0.6875,-0.9375 v -4 c 0,-0.43 -0.2795,-0.8005 -0.6875,-0.9375 -0.249,-0.084 -6.1555,-2.0625 -11.3125,-2.0625 h -3.6875 l -6.71875,-4.8125001 c -0.169,-0.121 -0.38575,-0.187499 -0.59375,-0.187499 z m 1.9999996,6.9999991 h 5 c 1.657,0 3,1.343 3,3.00000008 0,1.65699992 -1.343,2.99999992 -3,2.99999992 h -5 z m 28,7.8125 c -0.019,0.007 -0.0435,0.02525 -0.0625,0.03125 -0.167,0.055 -2.7185,0.885 -5.9375,1.5 v 4.6562514 c 0,0.553 0.447,1 1,1 h 4 c 0.553,0 1,-0.447 1,-1 z m -38.99999964,1.1875 v 1 H -3.9070956 v 2 c 0,0.496 -0.02575,0.809 -0.09375,1.0000004 -0.326,1.610001 -1.43725,2.918501 -2.90625,3.562501 v 0.4375 c 0,1.105 0.895,2 2,2 h 8 c 1.105,0 2,-0.895 2,-2 V 9.0148946 c 0,-1.105 -0.895,-2 -2,-2 h -2 v -1 z')
lwheel_svg = Path2D.new('m -3.4996449,-4.4958081 c -1.103,0 -2,0.897 -2,2 v 3.9999985 c 0,1.1030001 0.897,2.0000001 2,2.0000001 h 1 v 1 h 2.00000015 v -1 h 1 v 1 H 2.5003551 v -1 h 1 c 1.103,0 2,-0.897 2,-2.0000001 v -3.9999985 c 0,-1.103 -0.897,-2 -2,-2 z')
rwheel_svg = Path2D.new('m -2.49522,-4.4785246 v 1 h -1 c -1.103,0 -2,0.897 -2,2 v 4.000001 c 0,1.103 0.897,2 2,2 h 7 c 1.103,0 2,-0.897 2,-2 v -4.000001 c 0,-1.103 -0.897,-2 -2,-2 h -1 v -1 H 0.50477997 v 1 h -1 v -1 z')

def clear_screen():
	ctx.setTransform(1, 0, 0, 1, 0, 0) # Reset transformation to identity 
	ctx.fillStyle = 'grey'
	ctx.fillRect(0, 0, canvas.width, canvas.height)
	
def draw_car():
	scaling_factor = 10
	ctx.setTransform(scaling_factor, 0, 0, scaling_factor, canvas.width*0.5, canvas.height*0.5) # Reset transformation 

	ctx.fillStyle = '#000000'
	ctx.strokeStyle = '#990000'
	ctx.fill(car_svg)
	ctx.stroke(car_svg)
	
	ctx.save()
	ctx.translate(25, -11.2)
	ctx.rotate(0.2)
	ctx.fillStyle = '#008800'
	ctx.fill(lwheel_svg)
	ctx.stroke(lwheel_svg)
	ctx.restore()

	ctx.save()
	ctx.translate(25, 11.2)
	ctx.rotate(0.2)
	ctx.fillStyle = '#000088'
	ctx.fill(rwheel_svg)
	ctx.stroke(rwheel_svg)
	ctx.restore()
	
	ctx.strokeStyle = '#FFFFFF'
	ctx.beginPath()
	ctx.moveTo(0,-1)
	ctx.lineTo(0,1)
	ctx.stroke()
	
def draw_6():
	ctx.setTransform(canvas.width, 0, 0, -canvas.height, 0, canvas.height)
	# Outer shape
	ctx.lineWidth = '.16'
	ctx.strokeStyle = '#000000'
	ctx.lineJoin = 'round'
	for i in range(10):
		ctx.beginPath()
		if i==0:
			ctx.moveTo(.88, .8)
		else:
			ctx.moveTo(.87, .8)
		ctx.lineTo(.2, .8)
		ctx.lineTo(.2, .2)
		ctx.lineTo(.8, .2)
		ctx.lineTo(.8, .5)
		ctx.lineTo(.2, .5)
		ctx.stroke()
		c = 100 * i / 9 + 155
		ctx.strokeStyle = 'rgb(%s,%s,%s)' % (c,c,c)
		ctx.lineWidth = str(.14-.13*i/9)
	
	#Inner guides
	ctx.lineWidth = '.02'
	ctx.strokeStyle = '#AA0000'
	ctx.lineCap = 'round'
	ctx.lineJoin = 'round'
	ctx.beginPath()
	ctx.moveTo(.81, .8)
	ctx.lineTo(.2, .8)
	ctx.lineTo(.2, .55)
	ctx.moveTo(.2, .45)
	ctx.lineTo(.2, .2)
	ctx.lineTo(.8, .2)
	ctx.lineTo(.8, .5)
	ctx.lineTo(.25, .5)
	ctx.moveTo(.2, .499)
	ctx.lineTo(.2, .501)
	ctx.stroke()


def draw_4():
	ctx.setTransform(canvas.width, 0, 0, -canvas.height, 0, canvas.height)
	# Outer shape
	ctx.lineWidth = '.16'
	ctx.strokeStyle = '#000000'
	ctx.lineJoin = 'round'
	for i in range(10):
		ctx.beginPath()
		if i==0:
			ctx.moveTo(.88, .4)
		else:
			ctx.moveTo(.87, .4)
		ctx.lineTo(.2, .4)
		ctx.lineTo(.6, .8)
		if i==0:
			ctx.lineTo(.6, .12)
		else:
			ctx.lineTo(.6, .13)
		ctx.stroke()
		c = 100 * i / 9 + 155
		ctx.strokeStyle = 'rgb(%s,%s,%s)' % (c,c,c)
		ctx.lineWidth = str(.14-.13*i/9)
	
	#Inner guides
	ctx.lineWidth = '.02'
	ctx.strokeStyle = '#AA0000'
	ctx.lineCap = 'round'
	ctx.lineJoin = 'round'
	ctx.beginPath()
	ctx.moveTo(.81, .4)
	ctx.lineTo(.65, .4)
	ctx.moveTo(.55, .4)
	ctx.lineTo(.2, .4)
	ctx.lineTo(.6, .8)
	ctx.lineTo(.6, .45)
	ctx.moveTo(.6, .35)
	ctx.lineTo(.6, .19)
	ctx.moveTo(.599, .4)
	ctx.lineTo(.601, .4)
	ctx.stroke()

def draw_text():
	ctx.font = '58px serif'
	ctx.fillText('f() = l x' + chr(8321), 100, 100) # Display subscript with unicode
	ctx.font = '58px myFont'
	ctx.fillText('f() = l x' + chr(8321), 100, 200) # Display subscript with unicode
	ctx.font = '58px "Permanent Marker"'
	ctx.fillText('f() = l x' + chr(8321), 100, 300) # Display subscript with unicode
	ctx.font = '58px Pacifico'
	ctx.fillText('f() = l x' + chr(8321), 100, 400) # Display subscript with unicode

	
#########################################################################################
clear_screen()
#draw_4()
#draw_6()
#draw_text()
draw_car()

</py-script>

</div> <!--container-->
</body>
</html>

