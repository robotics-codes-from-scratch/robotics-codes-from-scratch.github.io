<!doctype html>
<html lang='en'>
<head>
<meta charset='utf-8'>
<meta name='viewport' content='width=device-width, initial-scale=1'>
<meta name='description' content='Robotics codes from scratch (RCFS) is a collection of source codes to study and test learning and optimization problems in robotics through simple 2D examples.'>
<meta name='keywords' content='robotics codes, robotics tutorial, rcfs, robotics from scratch'>
<meta name='author' content='Sylvain Calinon'>
<link rel='icon' href='images/favicon.ico' sizes='any'>
<link rel='icon' href='images/favicon.svg' type='image/svg+xml'>

<title>Robotics codes from scratch</title>
<link rel='canonical' href='https://robotics-codes-from-scratch.github.io/'>

<link rel='stylesheet' href='https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css' integrity='sha384-Zenh87qX5JnK2Jl0vWa8Ck2rdkQ2Bzep5IDxbcnCeuOxjzrPF/et3URy9Bv1WTRi' crossorigin='anonymous'>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.9.1/font/bootstrap-icons.css">

<link rel='stylesheet' href='https://fonts.googleapis.com/css?family=Permanent+Marker|Raleway'>


<script defer src='https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/js/bootstrap.bundle.min.js' integrity='sha384-OERcA2EqjJCMA+/3y+gxIOqMEjwtxJY7qPCqsdltbNJuaOe923+mo//f6V8Qbsw3' crossorigin='anonymous'></script>


<script src='https://cdn.jsdelivr.net/npm/chart.js'></script>

<!-- <script defer src='https://hypothes.is/embed.js' async></script> --> <!-- pyscript.css is incompatible with hypothes.is/embed.js-->



<script defer src='https://pyscript.net/latest/pyscript.js'></script>
<py-config type='toml'>
	packages = ['numpy']
</py-config>

<link rel='stylesheet' href='https://pyscript.net/latest/pyscript.css'> <!-- pyscript.css is incompatible with hypothes.is/embed.js-->
	
<link rel='stylesheet' href='css/sidebars.css'> <!-- main navigation menu -->
<link rel='stylesheet' href='css/main-template.css'>

</head>

<body>

<nav class='navbar fixed-top' aria-label='Light offcanvas navbar'>
<div class='container-fluid'>
<button class='navbar-toggler' type='button' data-bs-toggle='offcanvas' data-bs-target='#offcanvasNavbarLight' aria-controls='offcanvasNavbarLight'> 
<span class='navbar-toggler-icon'></span>
</button>
<!--<a class='navbar-brand' href='#'><h4>Movement primitives</h4></a>-->    
  
  <div class='offcanvas offcanvas-start' tabindex='-1' id='offcanvasNavbarLight' aria-labelledby='offcanvasNavbarLightLabel'>
    <div class='offcanvas-header'>
      <a class='navbar-brand' href='index.htm'><h4 class='offcanvas-title' id='offcanvasNavbarLightLabel'><i class='bi bi-robot'></i> <i class='bi bi-code-slash'></i> RCFS</h4></A>
      <button type='button' class='btn-close' data-bs-dismiss='offcanvas' aria-label='Close'></button>
    </div>
    
    <div class='offcanvas-body'>
	<ul class='list-unstyled ps-0'>
	  
	  <!--<li><a href='index.htm' class='link-dark d-inline-flex text-decoration-none rounded'>Home</a></li>-->
	  
	  <li class='border-top my-3'></li>
	  <li class='mb-1'>
		<button class='btn btn-toggle d-inline-flex align-items-center rounded border-0 collapsed' data-bs-toggle='collapse' data-bs-target='#exercises-collapse' aria-expanded='true'>
		  Exercises
		</button>
		<div class='collapse show' id='exercises-collapse'>
		  <ul class='btn-toggle-nav list-unstyled fw-normal pb-1 small'>
		    <li><a href='exercise01.htm' class='link-dark d-inline-flex text-decoration-none rounded'>01 Linear algebra in Python</a></li>
		  </ul>
		</div>
	  </li>
	  
	  <!--<li class='mb-1'>
		<button class='btn btn-toggle d-inline-flex align-items-center rounded border-0 collapsed' data-bs-toggle='collapse' data-bs-target='#misc-collapse' aria-expanded='false'>
		  Misc
		</button>
		<div class='collapse show' id='misc-collapse'>
		  <ul class='btn-toggle-nav list-unstyled fw-normal pb-1 small'>
		    <li><a href='sandbox.htm' class='link-dark d-inline-flex text-decoration-none rounded'>Sandbox</a></li>
		    <li><a href='movement_primitives.htm' class='link-dark d-inline-flex text-decoration-none rounded'>Movement primitives</a></li>
		  </ul>
		</div>
	  </li>-->
	  
	</ul>
    </div>
    
  </div>
</div>
</nav>

<!-- <iframe enable-annotation></iframe> -->

<div class='container-fluid'>


<script>
function clearMsgs() {
  const el = document.getElementById('errors');
  el.innerText = '';
  //console.log('event!');
}
function clearMsgsOutput() {
  const el = document.getElementById('output');
  el.innerText = '';
  //console.log('event!');
}
function clearPlot() {
  var chart = document.getElementById('chart');
  chart.data.datasets[0].data = [];
  chart.data.datasets[1].data = [];
  //console.log('event!');
}
const colors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b', '#e377c2', '#7f7f7f', '#bcbd22', '#17becf'];
</script>

<py-script>
import numpy as np
from js import document
from pyodide.ffi import create_proxy, to_js
from js import jsPlot

def plot(x, y, i=0, scatter=False):
  jsPlot(to_js(np.around(x,2)), to_js(np.around(y,2)), to_js(i), to_js(scatter))
</py-script>

<div class='row'>
<div class='col-sm-1'> </div>

<div class='col-sm-7'>

<h1>Exercise 1 — Linear algebra in Python</h1>

<p>The goal of this first exercise is to get familiar with linear algebra operations in Python and to the use of the web inerface that we will use for the exercises.</p>
<p>This page contains a series of codes that you can edit and run. It might take some time to load (especially the first time you load it). The functionalities have been tested with Chrome and Firefox.</p>
<p>To run the code in each editor box, you can either press shift+enter or click on the green run button <svg style='height:20px;width:20px;vertical-align:-.125em;transform-origin:center;overflow:visible;color:green' viewBox='0 0 384 512' aria-hidden='false' role='img' xmlns='http://www.w3.org/2000/svg'><g transform='translate(192 256)' transform-origin='96 0'><g transform='translate(0,0) scale(1,1)'><path d='M361 215C375.3 223.8 384 239.3 384 256C384 272.7 375.3 288.2 361 296.1L73.03 472.1C58.21 482 39.66 482.4 24.52 473.9C9.377 465.4 0 449.4 0 432V80C0 62.64 9.377 46.63 24.52 38.13C39.66 29.64 58.21 29.99 73.03 39.04L361 215z' fill='currentColor' transform='translate(-192 -256)'></path></g></g></svg> that appears on the right corner of the editor when you hover over it.</p>
<p>The last line of the code can be used to display the outputs of the execution (workspace on the right side of the page), by just writing the name of the variable. <em>print(var)</em> can alternatively by used at any place within the code. Only the last output will be displayed on the workspace. At anytime, you can click on the <em>clear</em> buttons to clean the workspace.</p>
<p>When defining functions, you can use two space characters to create tabulations (the tab key should be kept for navigating the web interface).</p>
<p>This first exercise only requires you to run the codes, to display the results, to analyze these outputs, and to modify the examples in order to get familiar with the use of matrices, vectors and associated linear algebra operations in Python. Some of the exercises require the previous codes to have been run once, in order to define the variables.</p>

<h5>1. Test your first Python code</h5>
<py-repl id='rep0' std-out='output' std-err='errors'>print('Hello world!')</py-repl>

<h5>2. Create and display a random 3D vector</h5>

<py-repl id='rep1' std-out='output' std-err='errors' output-mode='replace'>
vec1 = np.array([3., 4.]) # create a vector with given entries
vec2 = np.random.randn(3) # create a random vector
vec1, vec2
</py-repl>

<h5>3. Create and display a random 3D matrix</h5>

<py-repl id='rep2' std-out='output' std-err='errors' output-mode='replace' >
mat1 = np.array([[1.,2.],[2., 10.]]) # create a matrix with given entries
mat2 = np.random.randn(3,3) # create a random 3x3 matrix
mat1, mat2
</py-repl>

<h5>4. Multiplication and product operations</h5>

<py-repl id='rep3' std-out='output' std-err='errors' output-mode='replace' >
prod1 = mat1 @ mat1 # multiply mat1 by mat1
prod2 = mat1 * mat1 # elementwise product between mat1 by mat1
prod3 = mat1 @ vec1 # multiply mat1 by vec1
prod4a = vec2.T @ vec2 # dot product between vec2 and vec2
prod4b = vec2.dot(vec2) # dot product between vec2 and vec2
prod5 = np.outer(vec2, vec2) # Outer product between vec2 and vec2
prod4a,prod4b # Display two of the results
</py-repl>

<h5>5. Reformatting and stacking of vectors and matrices</h5>

<py-repl id='rep4' std-out='output' std-err='errors'>
vec3 = np.random.randn(3)
# stack vec2 and vec3 to obtain a matrix of shape (2,3)
stacked1 = np.stack([vec2, vec3])
# stack mat2 and vec2 to obtain a matrix of shape (4,3)
concatenated1 =  np.vstack([mat2, vec2[None]])
# stack mat2 and vec2 to obtain a matrix of shape (3,4)
concatenated2 =  np.hstack([mat2, vec2[:,None]])
stacked1.shape # display the matrix dimension of stacked1 
</py-repl>

<h5>6. Inversion of a matrix</h5>

<py-repl id='rep5' std-out='output' std-err='errors'>
  mat = np.diag([1., 1., 1.]) # set diagonal matrix 
  mat_inv = np.linalg.inv(mat) # matrix inversion

  # Let's make it not invertible by changing the last entry to 0
  mat[-1,-1] = 0.
  # Let's now check if it is invertible (without inverting it)
  is_invertible = np.linalg.det(mat) != 0.

  # Pseudoinverses of mat
  mat1_pinv = (mat.T @ mat).T @ mat # using (A.T @ A).T @ A
  mat2_pinv = np.linalg.pinv(mat) # using np.linalg.pinv()
  diff = np.linalg.norm(mat1_pinv - mat2_pinv, ord='fro') #Compare the two solutions

  is_invertible, diff # diff should be almost zero
</py-repl>

<h5>7. Solve Ax=b using least squares</h5>

<p>Complete the code below to compute x so that Ax=b.</p> 
<p>Compute the error between Ax and b to see if your solution for x seems correct.</p>
<p>Modify the dimensions of A and b (including rectangular matrices for A) and observe the results.</p>

<py-repl id='rep6' std-out='output' std-err='errors'>
A = np.random.randn(3,3)
b = np.random.randn(3)
# x = ...
</py-repl>
<!--
x = np.linalg.pinv(A) @ b # solve
np.linalg.norm(A @ x - b)
-->

<h5>8. Implementing a function</h5>

<p>Implement a function fun(x) that inverts a matrix, by taking x as input (matrix) and by generating x_inv as output.</p>
<p>Can you make this function robust to the use of singular matrices? (see part 6 above as a hint)</p>

<py-repl id='rep7' std-out='output' std-err='errors'>
def fun(x):
  # x_inv = ...
  return x_inv

x = np.diag([1., 2, 0.])
fun(x)
</py-repl>
<!--
def fun(x):
  i = 0
  while np.linalg.det(x) == 0.:
    x = x + np.eye(x.shape[0])*(10**(-10+i))
    i += 1
    if i == 15: break
  return x

x = np.diag([1., 2, 0.])
fun(x)
-->

<h5>9. Plotting</h5>

<py-repl id='rep8' std-out='output' std-err='errors'>
x = np.arange(5) # create data
plot(x, x**2) # plot data in a graph
</py-repl>

<br><br><br>

</div> <!-- col-sm-7 -->


<div class='col-sm-4' id='div1'> 

<div class='sticky-sm-top' style='padding: 2rem 1rem 1rem 1rem;'>
<hr>

<div class='row justify-content-between'>
<div class='col-auto'><button class='btn btn-light btn-sm' disabled>Output</button></div> 
<div class='col-auto'><button class='btn btn-outline-secondary btn-sm float-right' onclick='clearMsgsOutput()'>Clear</button></div>
</div>
<div id='output'></div>
<hr>

<div class='row justify-content-between'>
<div class='col-auto'><button class='btn btn-light btn-sm' disabled>Error</button></div> 
<div class='col-auto'><button class='btn btn-outline-secondary btn-sm float-right' onclick='clearMsgs()'>Clear</button></div>
</div>
<div id='errors'></div>
<hr>

<div class='row justify-content-between'>
<div class='col-auto'><button class='btn btn-light btn-sm' disabled>Plot</button></div> 
<div class='col-auto'><button class='btn btn-outline-secondary btn-sm float-right' onclick='destroyChart()'>Clear</button></div>
</div>
<canvas id='chart'></canvas>

<script>
var chart;

function startChart() {
    // Code for chart initialization
    chart = new Chart('chart', {
      type: 'line',
      data: {
        datasets: [{
            borderColor: colors[0],
            backgroundColor: colors[0],
            pointRadius: [0],
          }
        ]
      },
      options: {
        plugins: {
          legend: {display: false},
          tooltip: {enabled: false},

        },
        scales: {
          x: {display: true},
          y: {display: true}
        },
      }
    });
}

function destroyChart() {
    chart.destroy();
    startChart();
}

startChart();

function jsPlot(xValues, yValues, i, color, scatter) {
  chart.data.labels = xValues;
  try {
    chart.data.datasets[i].data = yValues;
  }
  catch(err) {
    dataset = {};       //a single dataset is an object
    dataset.borderColor = colors[i%10];
    dataset.backgroundColor = colors[i%10];
    dataset.showLine = false;
    dataset.data = [];  //contains the 'Y; axis data
    chart.data.datasets.push(dataset);
    chart.data.datasets[i].data = yValues;
  }
  chart.update();
}
</script>

</div> <!-- col-sm-4 -->

</div> <!-- row -->

</div> <!--container-->
</body>
</html>

