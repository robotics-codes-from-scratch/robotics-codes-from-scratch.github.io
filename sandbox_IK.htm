<!doctype html>
<html lang='en'>
<head>
<meta charset='utf-8'>
<meta name='viewport' content='width=device-width, initial-scale=1'>
<meta name='description' content='Robotics codes from scratch (RCFS) is a collection of source codes to study and test learning and optimization problems in robotics through simple 2D examples.'>
<meta name='keywords' content='robotics codes, robotics tutorial, rcfs, robotics from scratch'>
<meta name='author' content='Sylvain Calinon'>
<link rel='icon' href='images/favicon.ico' sizes='any'>
<link rel='icon' href='images/favicon.svg' type='image/svg+xml'>

<title>Robotics codes from scratch</title>
<link rel='canonical' href='https://robotics-codes-from-scratch.github.io/'>

<link rel='stylesheet' href='https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css' integrity='sha384-Zenh87qX5JnK2Jl0vWa8Ck2rdkQ2Bzep5IDxbcnCeuOxjzrPF/et3URy9Bv1WTRi' crossorigin='anonymous'>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.9.1/font/bootstrap-icons.css">

<link rel='stylesheet' href='https://fonts.googleapis.com/css?family=Permanent+Marker|Raleway&display=swap'>


<script defer src='https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/js/bootstrap.bundle.min.js' integrity='sha384-OERcA2EqjJCMA+/3y+gxIOqMEjwtxJY7qPCqsdltbNJuaOe923+mo//f6V8Qbsw3' crossorigin='anonymous'></script>


<!-- <script defer src='https://hypothes.is/embed.js' async></script> --> <!-- pyscript.css is incompatible with hypothes.is/embed.js-->



<script defer src='https://pyscript.net/latest/pyscript.min.js'></script>
	
<py-config type='toml'>
	packages = ['numpy']
</py-config>
		
<link rel='stylesheet' href='https://pyscript.net/latest/pyscript.css'> <!-- pyscript.css is incompatible with hypothes.is/embed.js-->
	
<link rel='stylesheet' href='css/sidebars.css'> <!-- main navigation menu -->
<link rel='stylesheet' href='css/main-template.css'>

</head>

<body>

<nav class='navbar fixed-top' aria-label='Light offcanvas navbar' style='width: 50px;'>
<div class='container-fluid'>
<button class='navbar-toggler' type='button' data-bs-toggle='offcanvas' data-bs-target='#offcanvasNavbarLight' aria-controls='offcanvasNavbarLight'> 
<span class='navbar-toggler-icon' style='cursor: pointer;'></span>
</button>
<!--<a class='navbar-brand' href='#'><h4>Movement primitives</h4></a>-->    
  
  <div class='offcanvas offcanvas-start' tabindex='-1' id='offcanvasNavbarLight' aria-labelledby='offcanvasNavbarLightLabel' style='width: 500px;'>
    <div class='offcanvas-header'><!--style='height: 50px;'-->
      <a class='navbar-brand' href='index.htm'><h4 class='offcanvas-title' id='offcanvasNavbarLightLabel'><i class='bi bi-robot'></i> <i class='bi bi-code-slash'></i> RCFS</h4></a>
      <button type='button' class='btn-close' data-bs-dismiss='offcanvas' aria-label='Close'></button>
    </div>
    
    <div class='offcanvas-body'>
	<ul class='list-unstyled ps-0'>
	  
	  <!--<li><a href='index.htm' class='link-dark d-inline-flex text-decoration-none rounded'>Home</a></li>-->
	  
	  <li class='border-top my-1'></li>
	  
	  <li class='mb-1'>
		<button class='btn btn-toggle d-inline-flex align-items-center rounded border-0 collapsed' data-bs-toggle='collapse' data-bs-target='#sandboxes-collapse' aria-expanded='true'>Sandboxes</button>
		<div class='collapse show' id='sandboxes-collapse'>
		  <ul class='btn-toggle-nav list-unstyled fw-normal pb-1 small'>
		  	<li><a href='sandbox_FK.htm' class='link-dark d-inline-flex text-decoration-none rounded'>
			<div class='p-1 mb-0'>Forward kinematics (FK)</div></a></li>
		    <li><a href='sandbox_IK.htm' class='link-dark d-inline-flex text-decoration-none rounded'>
			<div class='p-1 mb-0'>Inverse kinematics (IK)</div></a></li>
			<li><a href='sandbox_bimanual.htm' class='link-dark d-inline-flex text-decoration-none rounded'>
			<div class='p-1 mb-0'>Bimanual robot</div></a></li>
			<li><a href='sandbox_humanoid.htm' class='link-dark d-inline-flex text-decoration-none rounded'>
			<div class='p-1 mb-0'>Humanoid robot (CoM and coordination matrix)</div></a></li>
		    <li><a href='sandbox_iLQR.htm' class='link-dark d-inline-flex text-decoration-none rounded'>
		    <div class='p-1 mb-0'>Iterative linear quadratic regulator (iLQR)</div></a></li>
		    <li><a href='sandbox_iLQR_car.htm' class='link-dark d-inline-flex text-decoration-none rounded'>
		    <div class='p-1 mb-0'>iLQR for vehicle steering</div></a></li>
		  </ul>
		</div>
	  </li>
	  
	  <li class='border-top my-1'></li>
	  
	  <li class='mb-1'>
		<button class='btn btn-toggle d-inline-flex align-items-center rounded border-0 collapsed' data-bs-toggle='collapse' data-bs-target='#exercises-collapse' aria-expanded='true'>Exercises</button>
		<div class='collapse show' id='exercises-collapse'>
		  <ul class='btn-toggle-nav list-unstyled fw-normal pb-1 small'>
		    <li><a href='exercise01.htm' class='link-dark d-inline-flex text-decoration-none rounded'>
			<div class='p-1 mb-0 bg-dark text-white font-monospace'>01</div>
			<div class='p-1 mb-0'>Linear algebra in Python</div></a></li>
		    <li><a href='exercise02.htm' class='link-dark d-inline-flex text-decoration-none rounded'>
		    <div class='p-1 mb-0 bg-dark text-white font-monospace'>02</div>
			<div class='p-1 mb-0'>Movement primitives and Newton's method</div></a></li>
			<li><a href='exercise03.htm' class='link-dark d-inline-flex text-decoration-none rounded'>
		    <div class='p-1 mb-0 bg-dark text-white font-monospace'>03</div>
			<div class='p-1 mb-0'>Gaussian Distributions</div></a></li>
			<li><a href='exercise04a.htm' class='link-dark d-inline-flex text-decoration-none rounded'>
		    <div class='p-1 mb-0 bg-dark text-white font-monospace'>4a</div>
			<div class='p-1 mb-0'>Forward kinematics</div></a></li>
			<li><a href='exercise04b.htm' class='link-dark d-inline-flex text-decoration-none rounded'>
		    <div class='p-1 mb-0 bg-dark text-white font-monospace'>4b</div>
			<div class='p-1 mb-0'>Inverse kinematics and nullspace control</div></a></li>
			<li><a href='exercise05a.htm' class='link-dark d-inline-flex text-decoration-none rounded'>
		    <div class='p-1 mb-0 bg-dark text-white font-monospace'>5a</div>
			<div class='p-1 mb-0'>Forward dynamics</div></a></li>
			<li><a href='exercise05b.htm' class='link-dark d-inline-flex text-decoration-none rounded'>
		    <div class='p-1 mb-0 bg-dark text-white font-monospace'>5b</div>
			<div class='p-1 mb-0'>Inverse dynamics and impedance control</div></a></li>
			<li><a href='exercise06a.htm' class='link-dark d-inline-flex text-decoration-none rounded'>
		    <div class='p-1 mb-0 bg-dark text-white font-monospace'>6a</div>
			<div class='p-1 mb-0'>Planning with linear quadratic regulator</div></a></li>
			<li><a href='exercise06b.htm' class='link-dark d-inline-flex text-decoration-none rounded'>
		    <div class='p-1 mb-0 bg-dark text-white font-monospace'>6b</div>
			<div class='p-1 mb-0'>Planning in joint space with LQR</div></a></li>
			<li><a href='exercise07.htm' class='link-dark d-inline-flex text-decoration-none rounded'>
		    <div class='p-1 mb-0 bg-dark text-white font-monospace'>07</div>
			<div class='p-1 mb-0'>Iterative linear quadratic regulator (iLQR)</div></a></li>
			<li><a href='exercise08.htm' class='link-dark d-inline-flex text-decoration-none rounded'>
		    <div class='p-1 mb-0 bg-dark text-white font-monospace'>08</div>
			<div class='p-1 mb-0'>Exploration with ergodic control</div></a></li>
		  </ul>
		</div>
	  </li>
	  
	</ul>
    </div> <!--offcanvas-body-->
    
  </div> <!--offcanvas-->
</div> <!--container-fluid-->
</nav>

<!-- <iframe enable-annotation></iframe> -->

<div class='container-fluid'>


<div class='row'>
<div class='col-sm-1'></div>
<div class='col-sm-7'>

<br><br>

<script>
function clearMsgs() {
  const el = document.getElementById('repl-err');
  el.innerText = '';
  //console.log('event!');
}
</script>


<ul class='nav nav-tabs' id='myTab' role='tablist'>

<li class='nav-item' role='presentation'><button class='nav-link active' id='IK-tab' data-bs-toggle='tab' data-bs-target='#IK-tab-pane' type='button' role='tab' aria-controls='IK-tab-pane' aria-selected='true'>IK</button></li>

<li class='nav-item' role='presentation'><button class='nav-link' id='dIK-tab' data-bs-toggle='tab' data-bs-target='#dIK-tab-pane' type='button' role='tab' aria-controls='dIK-tab-pane' aria-selected='false'>Damped IK</button></li>

<li class='nav-item' role='presentation'><button class='nav-link' id='wIK-tab' data-bs-toggle='tab' data-bs-target='#wIK-tab-pane' type='button' role='tab' aria-controls='wIK-tab-pane' aria-selected='false'>Weighted IK</button></li>

<li class='nav-item' role='presentation'><button class='nav-link' id='pIK-tab' data-bs-toggle='tab' data-bs-target='#pIK-tab-pane' type='button' role='tab' aria-controls='pIK-tab-pane' aria-selected='false'>Prioritized IK</button></li>

</ul>

<div class='tab-content' id='myTabContent'>

<div class='tab-pane fade show active' id='IK-tab-pane' role='tabpanel' aria-labelledby='IK-tab' tabindex='0'>
<div onkeydown='clearMsgs()' onclick='clearMsgs()'>
<py-repl std-out='repl-out' std-err='repl-err'>
x = [-np.pi/4, np.pi/2, np.pi/4] # Initial robot state
def controlCommand(x, param):
  f = fkin(x, param)
  J = Jkin(x, param)
  u = np.linalg.pinv(J) @ logmap(param.Mu, f) # Position & orientation tracking
  # u = np.linalg.pinv(J[:2,:]) @ (param.Mu[:2] - f[:2]) # Position tracking
  # u = np.linalg.pinv(J[2:,:]) @ (param.Mu[2:] - f[2:]) # Orientation tracking
  # u = J.T @ logmap(param.Mu, f) * 1E-4 # Gradient-based tracking
  # u = np.zeros(param.nbVarX) # Zero control commands
  return u
</py-repl>
</div>
</div>

<div class='tab-pane fade' id='dIK-tab-pane' role='tabpanel' aria-labelledby='dIK-tab' tabindex='0'>
<div onkeydown='clearMsgs()' onclick='clearMsgs()'>
<py-repl std-out='repl-out' std-err='repl-err'>
x = [-np.pi/4, np.pi/2, np.pi/4] # Initial robot state
def controlCommand(x, param):
  f = fkin(x, param)
  J = Jkin(x, param)
  pinvJ = np.linalg.inv(J.T @ J + np.eye(param.nbVarX) * 1E2) @ J.T # Damped pseudoinverse
  u = pinvJ @ logmap(param.Mu, f) # Position & orientation tracking
  return u
</py-repl>
</div>
</div>

<div class='tab-pane fade' id='wIK-tab-pane' role='tabpanel' aria-labelledby='wIK-tab' tabindex='0'>
<div onkeydown='clearMsgs()' onclick='clearMsgs()'>
<py-repl std-out='repl-out' std-err='repl-err'>
x = [-np.pi/4, np.pi/2, np.pi/4] # Initial robot state
def controlCommand(x, param):
  f = fkin(x, param)
  J = Jkin(x, param)
  
  # Weights in task space
  Wf = np.diag([1, 1, 0])
  pinvWJ = np.linalg.inv(J.T @ Wf @ J + np.eye(param.nbVarX) * 1E-2) @ J.T @ Wf # Weighted pseudoinverse
  u = pinvWJ @ logmap(param.Mu, f) # Position & orientation tracking
  
  # # Weights in configuration space
  # Wx = np.diag([0.01, 1, 1])
  # pinvWJ =  Wx @ J[:2,:].T @ np.linalg.inv(J[:2,:] @ Wx @ J[:2,:].T + np.eye(2) * 1E-2) # Weighted pseudoinverse
  # u = pinvWJ @ (param.Mu[:2] - f[:2]) # Position tracking
  
  return u
</py-repl>
</div>
</div>

<div class='tab-pane fade' id='pIK-tab-pane' role='tabpanel' aria-labelledby='pIK-tab' tabindex='0'>
<div onkeydown='clearMsgs()' onclick='clearMsgs()'>
<py-repl std-out='repl-out' std-err='repl-err'>
x = np.array([-np.pi/4, np.pi/2, np.pi/4]) # Initial robot pose
xh = np.array([-np.pi/4, np.pi/2, np.pi/4]) # Preferred robot pose
def controlCommand(x, param):
  f = fkin(x, param)
  J = Jkin(x, param)
  
  # Prioritized tracking with motion of first joint as secondary task
  u1 = np.linalg.pinv(J[:2,:]) @ (param.Mu[:2] - f[:2]) # Position tracking
  N = np.eye(param.nbVarX) - np.linalg.pinv(J[:2,:]) @ J[:2,:] # Nullspace projection matrix
  u = u1 + N @ [1, 0, 0] # Control commands
  
  # # Prioritized tracking with preferred pose maintenance as secondary task
  # u1 = np.linalg.pinv(J[:2,:]) @ (param.Mu[:2] - f[:2]) # Position tracking
  # N = np.eye(param.nbVarX) - np.linalg.pinv(J[:2,:]) @ J[:2,:] # Nullspace projection matrix
  # u = u1 + N @ (xh - x) # Control commands
  
  # # Prioritized control (position tracking prioritized over orientation tracking)
  # dfp = (param.Mu[:2] - f[:2]) * 10 # Position correction
  # dfo = (param.Mu[2:] - f[2:]) * 10 # Orientation correction
  # Jp = J[:2,:] # Jacobian for position 
  # Jo = J[2:,:] # Jacobian for orientation
  # pinvJp = np.linalg.inv(Jp.T @ Jp + np.eye(param.nbVarX) * 1e-2) @ Jp.T # Damped pseudoinverse
  # Np = np.eye(param.nbVarX) - pinvJp @ Jp # Nullspace projection operator
  # up = pinvJp @ dfp # Command for position tracking
  # JoNp = Jo @ Np
  # pinvJoNp = JoNp.T @ np.linalg.inv(JoNp @ JoNp.T + np.eye(1) * 1e1) # Damped pseudoinverse
  # uo = pinvJoNp @ (dfo - Jo @ up) # Command for orientation tracking (with position tracking prioritized)
  # u = up + Np @ uo # Control commands
  
  return u
</py-repl>
</div>
</div>

</div> <!--tab-content-->

<p id='repl-out' style='font-size: 70%; color: #777777;'>(press shift+enter or click on the green run button to run the code; objects and joints can be moved with the mouse)</p>
<p id='repl-err' style='font-size: 70%; color: #880000;'></p>

<input id='object_angle' type='range' min='-3.14159' max='3.14159' step='0.0001' value='0' class='w-72' style='vertical-align:middle;'> <label>Object orientation</label> 

</div> <!--sm-7-->

<div class='col-sm-4'>
<div class='sticky-sm-top'>
<canvas id='canvas' style='width:100%;' width='900px' height='700px'></canvas>
</div>
</div> <!--sm-4-->

</div> <!--row-->

<py-script>
from pyodide.ffi import create_proxy
from js import Path2D, document, console
import numpy as np
import asyncio

object_angle = document.getElementById('object_angle')  # Objects angle

#########################################################################################
base1_svg = Path2D.new('m -40.741975,77.319831 c -0.47247,-4.03869 7.32825,-20.1653 10.1171,-22.57617 4.71807,-4.07862 14.00201,-4.3722 15.87822,-6.89366 1.16821,-1.06725 1.19306,-2.45846 1.19136,-4.984461 -0.005,-6.836939 0.0375,-38.9164375 -0.0588,-42.62054746 C -13.757555,-5.2728275 -9.8130348,-13.34661 -0.02248483,-13.67734 7.5903552,-13.93451 13.741895,-7.1292375 13.608255,-0.84839739 13.474625,5.4324325 13.073715,50.200081 13.741895,54.075491 c 0.66817,3.8754 3.0736,26.72695 3.0736,26.72695 l -53.47684,-0.23624 c -3.68777,-0.0163 -4.0806,-3.24637 -4.0806,-3.24637 z')
base2_svg = Path2D.new('m -13.653647,45.770986 27.119789,-0.07088')

seg11_svg = Path2D.new('M 1.1085815,-48.64595 C 2.8616565,-42.037584 12.141047,-7.3721658 13.181308,-3.8158258 14.730923,1.4818692 12.982058,10.29588 3.6015646,13.1191 -3.6924249,15.31437 -11.379603,10.30832 -12.856452,4.2020952 c -1.476846,-6.106188 -11.012844,-42.5297362 -12.082149,-45.6580692 -1.43181,-5.329295 -2.652606,-11.707828 -2.961653,-18.313541 -0.264086,-5.644652 2.111069,-7.347919 2.111069,-7.347919 2.624567,-3.183184 8.150604,-3.203987 10.333578,-6.275591 1.769697,-2.490098 1.823736,-5.627976 1.959877,-8.208118 0.347278,-6.581603 7.8818877,-11.888333 13.83865325,-11.31331 11.26196775,1.087146 13.17554475,9.678077 12.89920975,14.363762 -0.465778,7.897881 -5.8447437,11.223081 -10.8257944,12.5317 -4.0229212,1.0569 -4.0522977,5.558527 -3.6062254,8.077811 0.53206435,3.004955 1.69902315,6.035714 2.2984683,9.29523 z')
seg12_svg = Path2D.new('m 0.05406256,-11.597507 c -6.39589386,0 -11.58398456,5.1988245 -11.58398456,11.60742169 0,6.40859681 5.1880907,11.60742231 11.58398456,11.60742231 6.39589414,0 11.58398444,-5.1988255 11.58398444,-11.60742231 0,-6.40859719 -5.1880903,-11.60742169 -11.58398444,-11.60742169 z')
seg13_svg = Path2D.new('m 0.89874154,-90.983149 c -6.37570324,-0.50777 -11.96015354,4.262759 -12.46893054,10.651135 -0.508778,6.388373 4.2502031,11.982666 10.62590635,12.490434 6.37571205,0.507768 11.96015765,-4.262758 12.46893565,-10.65113 0.50878,-6.388376 -4.2501988,-11.982669 -10.62591146,-12.490439 z')
seg14_svg = Path2D.new('M -24.784795,-41.659214 1.1085815,-48.64595')
seg15_svg = Path2D.new('m -20.037453,-23.361462 c 0,0 0.150891,-2.736177 2.859936,-3.928038 2.698441,-1.058633 15.064238,-4.832856 18.5649072,-5.023273 3.4151981,-0.800461 4.5404475,1.903276 4.5404475,1.903276')

seg21_svg = Path2D.new('m 1.0846146,-63.378335 c 0.2455591,-2.834423 3.4523451,-16.559449 4.0431711,-18.415736 1.4726648,-4.271726 5.7043363,-7.554682 6.9088533,-12.676592 0.896166,-8.180737 -5.5218419,-14.075707 -11.67006058,-13.690757 -5.14680322,0.32229 -11.25729142,3.07163 -11.71005642,12.988353 -0.245696,5.381384 2.1556935,6.934579 1.261502,10.892576 -1.067995,4.72731 -3.306673,16.43352 -4.123841,19.092346 -1.013352,3.297141 -2.321128,5.411066 -6.454795,11.635385 -4.133667,6.224321 -5.394419,14.031661 -6.200979,18.250843 -0.80656,4.219183 -2.639059,14.959257 -1.769749,20.046047 0.662189,3.874813 5.317911,7.0872532 8.194376,7.8656925 2.799342,0.6504765 3.517742,0.6405013 5.007603,2.5337107 1.489861,1.8932084 1.467073,4.13299795 2.141633,7.605938 0.4829,3.1674976 4.2207359,9.9421608 11.3304401,10.8558018 C 5.1524174,14.518915 14.875984,8.7881742 13.263942,-1.6038057 11.604726,-12.299883 3.6744317,-12.710682 0.92067775,-13.632854 -1.5420631,-15.114186 -2.6268693,-19.519275 -1.8747035,-22.72879 -1.1225409,-25.938308 1.196278,-37.889572 1.3340625,-40.676542 1.8762966,-51.644393 -0.30239687,-54.622686 1.0846146,-63.378335 Z')
seg22_svg = Path2D.new('M -11.586565,0.93074939 C -11.083534,7.3068272 -5.4927791,12.069965 0.89597241,11.565935 7.284721,11.061904 12.059397,5.4810033 11.556367,-0.89507457 11.053335,-7.2711624 5.4625836,-12.034299 -0.92616504,-11.530269 -7.3149165,-11.02624 -12.089595,-5.4453385 -11.586565,0.93074939 Z')
seg23_svg = Path2D.new('m -26.640574,-36.592971 c 5.304398,1.031726 26.42204728,5.61535 26.42204728,5.61535')
seg24_svg = Path2D.new('m -18.97242,-7.0296766 c 0,0 5.357638,0.9161489 6.790283,-0.3224518 0,0 1.645529,-2.0773004 2.9224726,-3.1740806 1.2245317,-1.051764 3.0335173,-2.07985 3.0335173,-2.07985 1.9028326,-1.212528 2.2666634,-4.627153 3.1812597,-7.476594 1.7216337,-5.363774 1.9197573,-6.250728 1.9197573,-6.250728')

seg31_svg = Path2D.new('m -28.6797,-26.841855 c -1.2675,3.57197 -1.218858,4.557009 -1.595581,8.234518 -0.376722,3.677509 -0.09415,6.442577 -0.0095,8.568278 -0.253944,2.7250156 1.116106,5.225167 1.12849,7.9985227 -0.113818,2.61245518 -0.732443,4.5287742 -1.461378,6.6813667 -0.049,4.0362406 -0.269163,8.1196006 0.283769,12.1263916 0.524743,2.889586 3.777418,3.398207 6.006756,4.487809 3.000431,1.151299 5.962802,2.459036 9.011639,3.446545 2.908512,0.626882 4.197412,-2.375507 4.231736,-4.87884 0.0854,-2.479073 0.335025,-4.760767 2.8765686,-5.44487 3.9560009,-1.216619 8.05245912,-1.946456 12.0010307,-2.99019 5.703849,-2.0129894 9.4239807,-8.5502843 7.7887937,-14.4529723 -1.270267,-5.5243102 -6.867591,-9.6714567 -12.54557065,-9.0219797 -3.01008665,0.221201 -5.63894195,1.895241 -8.24502045,3.5658663 -2.0818469,1.3351245 -1.6868669,-3.2534803 -1.7460679,-4.8326393 -0.0013,-3.276304 0.21006,-3.084655 0.0062,-4.979716 -0.203891,-1.895062 -0.264478,-4.611901 -1.494343,-8.479035 -5.412496,-0.0097 -15.221678,-0.05267 -15.221678,-0.05267 z')
seg32_svg = Path2D.new('m -14.015345,-33.566241 c -1.232867,-1.390966 -2.465733,-2.781932 -3.698599,-4.172898 0.0038,-3.646334 0.02928,-7.293353 0.01923,-10.939249 -0.02501,-0.949144 -0.522837,-2.078703 -1.513796,-2.119205 -0.942425,0.01577 -1.897362,-0.08159 -2.832194,0.04493 -0.950302,0.333999 -1.133628,1.580185 -1.115778,2.522511 -0.04848,3.474219 -0.09695,6.948437 -0.145432,10.422655 -1.213181,1.407781 -2.426362,2.815561 -3.639543,4.223342 4.308705,0.006 8.617409,0.01194 12.926114,0.01791 z')
seg33_svg = Path2D.new('m -12.412129,-26.867866 v -4.799995 c 0,-1.919999 -0.435344,-1.878396 -0.888867,-1.876655 -3.030562,0.01164 -14.262729,-0.07064 -14.523962,-0.04334 -0.467055,0 -0.934111,0 -0.883228,1.904343 0.01098,0.410814 0.0013,4.808677 0.0013,4.808677')
seg34_svg = Path2D.new('M -10.345869,0.79321884 C -9.8879044,6.4881727 -4.8873495,10.735439 0.81892316,10.276563 6.5251942,9.8176865 10.782785,4.8259161 10.324819,-0.86903645 9.8668498,-6.5639995 4.8662942,-10.811265 -0.8399769,-10.35239 -6.5462504,-9.8935134 -10.803835,-4.901743 -10.345869,0.79321884 Z')
seg35_svg = Path2D.new('m -10.926083,-10.640947 c -12.932836,-0.04585 -19.378158,-0.0931 -19.378158,-0.0931')
seg36_svg = Path2D.new('M -9.9187154,15.300602 C -29.124234,15.272545 -30.475824,15.251842 -30.475824,15.251842')
seg37_svg = Path2D.new('m -23.186087,-46.845579 h 5.542233 v 0')
    
# Logarithmic map for R^2 x S^1 manifold
def logmap(f, f0):
	diff = np.zeros(3)
	diff[:2] = f[:2] - f0[:2]
	diff[2] = np.imag(np.log(np.exp(f0[-1]*1j).conj().T * np.exp(f[-1]*1j).T)).conj()
	return diff

# Apply angle offsets to match robot kinematic chain
def emulate_DH_params(x):
	xt = np.copy(x)
	xt[0] = xt[0] - np.pi/2
	orient = np.mod(np.sum(xt,0)+np.pi, 2*np.pi) - np.pi
	xt[2] = xt[2] - np.arctan(20.5/51)
	return xt, orient

# Forward kinematics for end-effector (in robot coordinate system)
def fkin(x, param):
	xt, orient = emulate_DH_params(x)
	L = np.tril(np.ones([param.nbVarX, param.nbVarX]))
	f = np.vstack([
		param.l @ np.cos(L @ xt),
		param.l @ np.sin(L @ xt),
		orient
	]) # f1,f2,f3, where f3 is the orientation (single Euler angle for planar robot)
	f[1] += 81
	return f.flatten()

# Forward kinematics for all joints (in robot coordinate system)
def fkin0(x, param): 
	xt, _ = emulate_DH_params(x)
	L = np.tril(np.ones([param.nbVarX, param.nbVarX]))
	f = np.vstack([
		L @ np.diag(param.l) @ np.cos(L @ xt),
		L @ np.diag(param.l) @ np.sin(L @ xt)
	])
	f = np.hstack([np.zeros([2,1]), f])
	f[1] += 81
	return f

# Jacobian with analytical computation (for single time step)
def Jkin(xt, param):
	xt, _ = emulate_DH_params(xt)
	L = np.tril(np.ones([param.nbVarX, param.nbVarX]))
	J = np.vstack([
		-np.sin(L @ xt).T @ np.diag(param.l) @ L,
		 np.cos(L @ xt).T @ np.diag(param.l) @ L,
		 np.ones([1,param.nbVarX])
	])
	return J

## Parameters
# ===============================

param = lambda: None # Lazy way to define an empty class in python
param.dt = 1e-1 # Time step length
param.nbVarX = 3 # State space dimension (x1,x2,x3)
param.nbVarF = 3 # Task space dimension (position and orientation)
param.l = [79, 96, 55] # Robot links lengths
param.sz = [50, 30] # Size of objects
param.Mu = [90, 0, 0] # Object position and orientation 

#########################################################################################

# GUI
scaling_factor = 2 # General scaling factor for rendering 

# Mouse events
mouse0 = np.zeros(2)
mouse = np.zeros(2)
mousedown = 0
selected_obj = -1
hover_obj = -1
hover_joint = -1
move_joint= -1
hover0 = np.zeros(2)

def onMouseMove(event):
	global mouse, mouse0, hover0, x
	offset = canvas.getBoundingClientRect()
	mouse0[0] = (event.clientX - offset.x) * canvas.width / canvas.clientWidth
	mouse0[1] = (event.clientY - offset.y) * canvas.height / canvas.clientHeight
	mouse[0] = (mouse0[0] - canvas.width * 0.5) / scaling_factor
	mouse[1] = (mouse0[1] - canvas.height * 0.5) / scaling_factor
	if move_joint >= 0:
		x[move_joint] -= 1E-2 * np.sum(hover0 - mouse0)
		hover0 = np.copy(mouse0)

def onTouchMove(event):
	global mouse, mouse0, hover0, x
	offset = event.target.getBoundingClientRect()
	mouse0[0] = (event.touches.item(0).clientX - offset.x) * canvas.width / canvas.clientWidth
	mouse0[1] = (event.touches.item(0).clientY - offset.y) * canvas.height / canvas.clientHeight
	mouse[0] = (mouse0[0] - canvas.width * 0.5) / scaling_factor 
	mouse[1] = (mouse0[1] - canvas.height * 0.5) / scaling_factor
	if move_joint >= 0:
		x[move_joint] -= 1E-2 * np.sum(hover0 - mouse0)
		hover0 = np.copy(mouse0)
	
def onMouseDown(event):
	global mousedown, move_joint, hover0
	mousedown = 1
	if hover_joint >= 0:
		move_joint = hover_joint
		hover0 = np.copy(mouse0)

def onMouseUp(event):
	global mousedown, selected_obj, move_joint
	mousedown = 0
	selected_obj = -1
	move_joint = -1

def onWheel(event):
	global hover_joint, hover_obj, x, object_angle
	if hover_obj == 0:
		#param.Mu[2] += 0.2 * (event.deltaY/106)
		object_angle.value = (float)(object_angle.value) + 0.2 * (event.deltaY/106)
	if hover_joint >= 0:
		x[hover_joint] -= 0.2 * (event.deltaY/106)

document.addEventListener('mousemove', create_proxy(onMouseMove)) #for standard mouse
document.addEventListener('touchmove', create_proxy(onTouchMove)) #for mobile interfaces

document.addEventListener('mousedown', create_proxy(onMouseDown)) #for standard mouse
#document.addEventListener('pointerdown', create_proxy(onMouseDown)) #for mobile interfaces 
document.addEventListener('touchstart', create_proxy(onMouseDown)) #for mobile interfaces 

document.addEventListener('mouseup', create_proxy(onMouseUp)) #for standard mouse
#document.addEventListener('pointerup', create_proxy(onMouseUp)) #for mobile interfaces 
document.addEventListener('touchend', create_proxy(onMouseUp)) #for mobile interfaces 

document.addEventListener('wheel', create_proxy(onWheel)) #for standard mouse

#########################################################################################

canvas = document.getElementById('canvas')
ctx = canvas.getContext('2d')

def clear_screen():
	ctx.setTransform(1, 0, 0, 1, 0, 0) # Reset transformation to identity 
	ctx.fillStyle = 'white'
	ctx.fillRect(0, 0, canvas.width, canvas.height)
	
	
def draw_ground():
	ctx.setTransform(scaling_factor, 0, 0, scaling_factor, canvas.width*0.5, canvas.height*0.5) # Reset transformation 	
	ctx.beginPath()
	ctx.lineCap = 'round'
	ctx.lineJoin = 'round'
	ctx.lineWidth = '5'
	ctx.strokeStyle = '#CCCCCC'
	ctx.moveTo(-200, 164)
	ctx.lineTo(200, 164)
	ctx.stroke()
	
	
def draw_robot(xt, color1, color2, color3, color4, selectable):
	global hover_joint
	ctx.setTransform(scaling_factor, 0, 0, scaling_factor, canvas.width*0.5, canvas.height*0.5) # Reset transformation 
	# Draw base
	ctx.translate(0, 81)
	ctx.lineWidth = '1'
	ctx.strokeStyle = color3
	ctx.fillStyle = color1
	ctx.fill(base1_svg)
	ctx.stroke(base1_svg) # Outline
	ctx.stroke(base2_svg) 

	# Draw seg1
	ctx.rotate(xt[0])
	ctx.fillStyle = color1
	ctx.fill(seg11_svg)
	ctx.stroke(seg11_svg) # Outline
	ctx.fillStyle = color2
	if selectable and ctx.isPointInPath(seg12_svg, mouse0[0], mouse0[1]):
		ctx.fillStyle = '#3399FF'
		hover_joint = 0
	ctx.fill(seg12_svg)
	ctx.stroke(seg12_svg)
	ctx.stroke(seg13_svg)
	ctx.stroke(seg14_svg)
	ctx.stroke(seg15_svg)
	
	# Draw seg2
	ctx.translate(0, -79)
	ctx.rotate(xt[1])
	ctx.fillStyle = color1
	ctx.fill(seg21_svg) 
	ctx.stroke(seg21_svg) # Outline
	ctx.fillStyle = color2
	if selectable and ctx.isPointInPath(seg22_svg, mouse0[0], mouse0[1]):
		ctx.fillStyle = '#FF9933'
		hover_joint = 1
	ctx.fill(seg22_svg)
	ctx.stroke(seg22_svg)
	ctx.stroke(seg23_svg)
	ctx.stroke(seg24_svg)

	# Draw seg3
	ctx.translate(0, -96)
	ctx.rotate(xt[2])
	ctx.fillStyle = color1
	ctx.fill(seg31_svg)
	ctx.stroke(seg31_svg) # Outline
	ctx.fill(seg32_svg)
	ctx.stroke(seg32_svg) # Outline
	ctx.fill(seg33_svg)
	ctx.stroke(seg33_svg) # Outline
	ctx.fillStyle = color2
	if selectable and ctx.isPointInPath(seg34_svg, mouse0[0], mouse0[1]):
		ctx.fillStyle = '#99FF33'
		hover_joint = 2
	ctx.fill(seg34_svg)
	ctx.stroke(seg34_svg)
	ctx.stroke(seg35_svg)
	ctx.stroke(seg36_svg)
	ctx.stroke(seg37_svg)

	# Draw end-effector point
	ctx.translate(-20.5, -51)
	ctx.beginPath()
	ctx.arc(0, 0, 2, 0, 2 * np.pi)
	ctx.fillStyle = color4
	ctx.fill()
	
#	# Draw skeleton of the kinematic chain
#	ctx.setTransform(scaling_factor, 0, 0, scaling_factor, canvas.width*0.5, canvas.height*0.5) # Reset transformation
#	ctx.lineCap = 'round'
#	ctx.lineJoin = 'round'
#	ctx.lineWidth = '2'
#	ctx.strokeStyle = '#FF8888'
#	f = fkin0(x, param)
#	ctx.beginPath()
#	ctx.moveTo(0, 81)
#	for i in range(param.nbVarX+1):
#		ctx.lineTo(f[0,i], f[1,i])
#	ctx.stroke()


def draw_obj(param, color, colortxt):
	global selected_obj, hover_obj
	ctx.setTransform(scaling_factor, 0, 0, scaling_factor, canvas.width*0.5, canvas.height*0.5) # Reset transformation
	
	ctx.translate(param.Mu[0], param.Mu[1])
	ctx.rotate(param.Mu[2])
	# Draw object
	ctx.fillStyle = color
	obj = Path2D.new()
	obj.rect(-param.sz[0]/2, -param.sz[1]/2, param.sz[0], param.sz[1])
	ctx.fill(obj)
	if ctx.isPointInPath(obj, mouse0[0], mouse0[1]):
		hover_obj = 0
	if ctx.isPointInPath(obj, mouse0[0], mouse0[1]) and mousedown==1:
		selected_obj = 0
	#ctx.fillRect(-param.sz[0]/2, -param.sz[1]/2, param.sz[0], param.sz[1])
	if param.sz[0] > 39 and param.sz[1] > 19:
		ctx.textAlign = 'center'
		ctx.textBaseline = 'middle'
		ctx.font = '10px Permanent Marker'
		ctx.fillStyle = colortxt
		ctx.fillText('Move me!', 0, 0)
	

def controlCommand(x, param):
	#f_ee = fkin(x, param)
	#J = Jkin(x, param)
	#u = np.linalg.pinv(J) @ logmap(fh, f_ee) 
	u = np.zeros(param.nbVarX)
	return u
	
#########################################################################################
 
def errorHandler(e):
	msg = 'Error: ' + str(e)
	console.error(msg)
	el = document.getElementById('repl-err')
	el.innerText = msg
	#el.textContent = msg
	
#########################################################################################
x = [-np.pi/4, np.pi/2, np.pi/4] # Initial robot state
#u = np.zeros(param.nbVarX)

async def main():
	global hover_joint, hover_obj, param, x
	
	while True:
		try:
			u = controlCommand(x, param)
		except Exception as e:
			errorHandler(e)
			u = np.zeros(param.nbVarX)
		
		x += u * param.dt
		
		# Reinit hovering variables
		hover_joint = -1
		hover_obj = -1

		# Rendering
		clear_screen()
		draw_ground()
		draw_obj(param, '#FF3399', '#DD1177')
		draw_robot(x, '#CCCCCC', '#AAAAAA', '#222222', '#000000', True)
		
		# Object selection
		if selected_obj==0:
			param.Mu[:2] = mouse
			param.Mu[0] = max(min(param.Mu[0],225), -225)
			param.Mu[1] = max(min(param.Mu[1],175), -175)
		param.Mu[2] = (float)(object_angle.value)

		await asyncio.sleep(0.0001)

pyscript.run_until_complete(main())

</py-script>

</div> <!--container-->
</body>
</html>

