<!doctype html>
<html lang='en'>
<head>
<meta charset='utf-8'>
<meta name='viewport' content='width=device-width, initial-scale=1'>
<meta name='description' content='Robotics codes from scratch (RCFS) is a collection of source codes to study and test learning and optimization problems in robotics through simple 2D examples.'>
<meta name='keywords' content='robotics codes, robotics tutorial, rcfs, robotics from scratch'>
<meta name='author' content='Sylvain Calinon'>
<link rel='icon' href='images/favicon.ico' sizes='any'>
<link rel='icon' href='images/favicon.svg' type='image/svg+xml'>

<title>Robotics codes from scratch</title>
<link rel='canonical' href='https://robotics-codes-from-scratch.github.io/'>

<link rel='stylesheet' href='https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css' integrity='sha384-Zenh87qX5JnK2Jl0vWa8Ck2rdkQ2Bzep5IDxbcnCeuOxjzrPF/et3URy9Bv1WTRi' crossorigin='anonymous'>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.9.1/font/bootstrap-icons.css">

<link rel='stylesheet' href='https://fonts.googleapis.com/css?family=Permanent+Marker|Raleway'>


<script defer src='https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/js/bootstrap.bundle.min.js' integrity='sha384-OERcA2EqjJCMA+/3y+gxIOqMEjwtxJY7qPCqsdltbNJuaOe923+mo//f6V8Qbsw3' crossorigin='anonymous'></script>


<!--<script src='https://cdn.jsdelivr.net/npm/chart.js'></script>-->

<!-- <script defer src='https://hypothes.is/embed.js' async></script> --> <!-- pyscript.css is incompatible with hypothes.is/embed.js-->



<script defer src='https://pyscript.net/latest/pyscript.js'></script>
	
<py-config type='toml'>
	packages = ['numpy']
</py-config>
		
<link rel='stylesheet' href='https://pyscript.net/latest/pyscript.css'> <!-- pyscript.css is incompatible with hypothes.is/embed.js-->
	
<link rel='stylesheet' href='css/sidebars.css'> <!-- main navigation menu -->
<link rel='stylesheet' href='css/main-template.css'>

</head>

<body>

<nav class='navbar fixed-top' aria-label='Light offcanvas navbar' style='width: 50px;'>
<div class='container-fluid'>
<button class='navbar-toggler' type='button' data-bs-toggle='offcanvas' data-bs-target='#offcanvasNavbarLight' aria-controls='offcanvasNavbarLight'> 
<span class='navbar-toggler-icon' style='cursor: pointer;'></span>
</button>
<!--<a class='navbar-brand' href='#'><h4>Movement primitives</h4></a>-->    
  
  <div class='offcanvas offcanvas-start' tabindex='-1' id='offcanvasNavbarLight' aria-labelledby='offcanvasNavbarLightLabel' style='width: 500px;'>
    <div class='offcanvas-header'><!--style='height: 50px;'-->
      <a class='navbar-brand' href='index.htm'><h4 class='offcanvas-title' id='offcanvasNavbarLightLabel'><i class='bi bi-robot'></i> <i class='bi bi-code-slash'></i> RCFS</h4></a>
      <button type='button' class='btn-close' data-bs-dismiss='offcanvas' aria-label='Close'></button>
    </div>
    
    <div class='offcanvas-body'>
	<ul class='list-unstyled ps-0'>
	  
	  <!--<li><a href='index.htm' class='link-dark d-inline-flex text-decoration-none rounded'>Home</a></li>-->
	  
	  <li class='border-top my-1'></li>
	  
	  <li class='mb-1'>
		<button class='btn btn-toggle d-inline-flex align-items-center rounded border-0 collapsed' data-bs-toggle='collapse' data-bs-target='#sandboxes-collapse' aria-expanded='true'>Sandboxes</button>
		<div class='collapse show' id='sandboxes-collapse'>
		  <ul class='btn-toggle-nav list-unstyled fw-normal pb-1 small'>
		  	<li><a href='sandbox_FK.htm' class='link-dark d-inline-flex text-decoration-none rounded'>
			<div class='p-1 mb-0'>Forward kinematics (FK)</div></a></li>
		    <li><a href='sandbox_IK.htm' class='link-dark d-inline-flex text-decoration-none rounded'>
			<div class='p-1 mb-0'>Inverse kinematics (IK)</div></a></li>
			<li><a href='sandbox_bimanual.htm' class='link-dark d-inline-flex text-decoration-none rounded'>
			<div class='p-1 mb-0'>Bimanual robot</div></a></li>
		    <li><a href='sandbox_iLQR.htm' class='link-dark d-inline-flex text-decoration-none rounded'>
		    <div class='p-1 mb-0'>Iterative linear quadratic regulator (iLQR)</div></a></li>
		  </ul>
		</div>
	  </li>
	  
	  <li class='border-top my-1'></li>
	  
	  <li class='mb-1'>
		<button class='btn btn-toggle d-inline-flex align-items-center rounded border-0 collapsed' data-bs-toggle='collapse' data-bs-target='#exercises-collapse' aria-expanded='true'>Exercises</button>
		<div class='collapse show' id='exercises-collapse'>
		  <ul class='btn-toggle-nav list-unstyled fw-normal pb-1 small'>
		    <li><a href='exercise01.htm' class='link-dark d-inline-flex text-decoration-none rounded'>
			<div class='p-1 mb-0 bg-dark text-white font-monospace'>01</div>
			<div class='p-1 mb-0'>Linear algebra in Python</div></a></li>
		    <li><a href='exercise02.htm' class='link-dark d-inline-flex text-decoration-none rounded'>
		    <div class='p-1 mb-0 bg-dark text-white font-monospace'>02</div>
			<div class='p-1 mb-0'>Movement primitives and Newton's method</div></a></li>
			<li><a href='exercise03.htm' class='link-dark d-inline-flex text-decoration-none rounded'>
		    <div class='p-1 mb-0 bg-dark text-white font-monospace'>03</div>
			<div class='p-1 mb-0'>Gaussian Distributions</div></a></li>
		  </ul>
		</div>
	  </li>
	  
	</ul>
    </div> <!--offcanvas-body-->
    
  </div> <!--offcanvas-->
</div> <!--container-fluid-->
</nav>

<!-- <iframe enable-annotation></iframe> -->

<div class='container-fluid'>


<div class='row'>
<div class='col-sm-1'></div>
<div class="col-sm-7">

<br><br>

<script>
function clearMsgs() {
  const el = document.getElementById('repl-err');
  el.innerText = '';
  //console.log('event!');
}
</script>

<div onkeydown='clearMsgs()' onclick='clearMsgs()'>
<py-repl std-out='repl-out' std-err='repl-err'>
def controlCommand(x, param):
  f = fkin(x, param)
  J = Jkin(x, param)
  u = np.linalg.pinv(J) @ (param.Mu - f[:,0]) * 10 
  #u = np.zeros(param.nbVarX)
  return u
</py-repl> <!--output='repl-out' std-out='repl-out'-->
</div>
<p id='repl-out' style='font-size: 70%; color: #777777;'>(press shift+enter or click on the green run button to run the code)</p>
<p id='repl-err' style='font-size: 70%; color: #880000;'></p>

</div> <!--sm-7-->

<div class='col-sm-4'>
<canvas id='canvas' style='width:100%;' width='900px' height='700px'></canvas>
</div> <!--sm-4-->

</div> <!--row-->

<py-script>
from pyodide.ffi import create_proxy
from js import Path2D
import numpy as np

# Forward kinematics for end-effector (in robot coordinate system)
def fkin(x, param):
    L = np.tril(np.ones(3))
    f = np.vstack([
        param.l[0:3].T @ np.cos(L @ x[0:3]),
        param.l[0:3].T @ np.sin(L @ x[0:3]),
        param.l[[0,3,4]].T @ np.cos(L @ x[[0,3,4]]),
        param.l[[0,3,4]].T @ np.sin(L @ x[[0,3,4]])
    ])  # f1,f2,f3,f4
    return f

# Forward kinematics for end-effector (in robot coordinate system)
def fkin0(x, param): 
    L = np.tril(np.ones(3))
    fl = np.vstack([
        L @ np.diag(param.l[0:3]) @ np.cos(L @ x[0:3]),
        L @ np.diag(param.l[0:3]) @ np.sin(L @ x[0:3])
    ])
    fr = np.vstack([
        L @ np.diag(param.l[[0,3,4]]) @ np.cos(L @ x[[0,3,4]]),
        L @ np.diag(param.l[[0,3,4]]) @ np.sin(L @ x[[0,3,4]])
    ])
    f = np.hstack([fl[:,::-1], np.zeros([2,1]), fr])
    return f

# Jacobian of the end-effector with analytical computation (for single time step)
def Jkin(x, param):
    L = np.tril(np.ones(3))
    J = np.zeros((param.nbVarF, param.nbVarX))
    Jl = np.vstack([-np.sin(L @ x[:3]).T @ np.diag(param.l[:3]) @ L,
                    np.cos(L @ x[:3]).T @ np.diag(param.l[:3]) @ L
                    ])
    Jr = np.vstack([-np.sin(L @ x[[0,3,4]]).T @ np.diag(np.array(param.l)[[0,3,4]]) @ L,
                    np.cos(L @ x[[0,3,4]]).T @ np.diag(np.array(param.l)[[0,3,4]]) @ L
                    ])
    J[:Jl.shape[0], :Jl.shape[1]] = Jl
    J[2:, [0,3,4]] = Jr
    return J


## Parameters
# ===============================

param = lambda: None # Lazy way to define an empty class in python
param.dt = 1e-1 # Time step length
param.nbVarX = 5 # State space dimension
param.nbVarF = 4 # Task space dimension ([x1,x2] for left end-effector, [x3,x4] for right end-effector)
param.l = np.array([200, 200, 150, 200, 150]) # Robot links lengths
param.Mu = np.array([-200, 100, 200, 100]) # Objects position

#########################################################################################

# Mouse events
mouse0 = np.zeros(2)
mouse = np.zeros(2)
mousedown = 0
hover_joint = -1
selected_obj = -1

def onMouseMove(event):
	global mouse, mouse0
	offset = canvas.getBoundingClientRect()
	mouse0[0] = (event.clientX - offset.x) * canvas.width / canvas.clientWidth
	mouse0[1] = (event.clientY - offset.y) * canvas.height / canvas.clientHeight
	mouse[0] = (mouse0[0] - canvas.width * 0.5) 
	mouse[1] = -(mouse0[1] - canvas.height * 0.9) 

def onTouchMove(event):
	global mouse, mouse0
	offset = event.target.getBoundingClientRect()
	mouse0[0] = (event.touches.item(0).clientX - offset.x) * canvas.width / canvas.clientWidth
	mouse0[1] = (event.touches.item(0).clientY - offset.y) * canvas.height / canvas.clientHeight
	mouse[0] = (mouse0[0] - canvas.width * 0.5) 
	mouse[1] = -(mouse0[1] - canvas.height * 0.9) 
	
def onMouseDown(event):
	global mousedown
	mousedown = 1

def onMouseUp(event):
	global mousedown, selected_obj
	mousedown = 0
	selected_obj = -1

def onWheel(event):
	global hover_joint, x
	if hover_joint >= 0:
		x[hover_joint] += 0.2 * (event.deltaY/106)

document.addEventListener('mousemove', create_proxy(onMouseMove)) #for standard mouse
document.addEventListener('touchmove', create_proxy(onTouchMove)) #for mobile interfaces

document.addEventListener('mousedown', create_proxy(onMouseDown)) #for standard mouse
#document.addEventListener('pointerdown', create_proxy(onMouseDown)) #for mobile interfaces 
document.addEventListener('touchstart', create_proxy(onMouseDown)) #for mobile interfaces 

document.addEventListener('mouseup', create_proxy(onMouseUp)) #for standard mouse
#document.addEventListener('pointerup', create_proxy(onMouseUp)) #for mobile interfaces 
document.addEventListener('touchend', create_proxy(onMouseUp)) #for mobile interfaces 

document.addEventListener('wheel', create_proxy(onWheel)) #for standard mouse


#########################################################################################

canvas = document.getElementById('canvas')
ctx = canvas.getContext('2d')

def clear_screen():
	ctx.setTransform(1, 0, 0, 1, 0, 0)
	ctx.fillStyle = 'white'
	ctx.fillRect(0, 0, canvas.width, canvas.height)


def draw_ground():
	ctx.setTransform(1, 0, 0, -1, canvas.width*0.5, canvas.height*0.9)	
	ctx.lineCap = 'round'
	ctx.lineJoin = 'round'
	ctx.lineWidth = '5'
	ctx.strokeStyle = '#CCCCCC'
	ctx.beginPath()
	ctx.moveTo(-400, 0)
	ctx.lineTo(400, 0)
	ctx.stroke()
	

def draw_robot(x, color):
	global hover_joint
	ctx.setTransform(1, 0, 0, -1, canvas.width*0.5, canvas.height*0.9)
	
	f = fkin0(x, param)
	
	# Draw base
	ctx.translate(f[0,3], f[1,3])
	ctx.lineWidth = '4'
	ctx.strokeStyle = 'white'
	ctx.fillStyle = color
	ctx.beginPath()
	ctx.arc(0, 0, 40, 0, np.pi)
	ctx.rect(-40, 0, 80, -40)
	ctx.fill()
	ctx.strokeStyle = color
	for i in range(5):
		ctx.beginPath()
		ctx.moveTo(-30+i*15, -40)
		ctx.lineTo(-40+i*15, -60)
		ctx.stroke()
		
	# Draw links
	ctx.lineCap = 'round'
	ctx.lineJoin = 'round'
	for i in range(param.nbVarX+1):
		# Draw links outlines
		ctx.lineWidth = '46'
		ctx.strokeStyle = 'white'
		ctx.beginPath()
		ctx.lineTo(f[0,i], f[1,i])
		ctx.lineTo(f[0,i+1], f[1,i+1])
		ctx.stroke()
		# Draw links
		ctx.lineWidth = '38'
		ctx.strokeStyle = color
		ctx.beginPath()
		ctx.lineTo(f[0,i], f[1,i])
		ctx.lineTo(f[0,i+1], f[1,i+1])
		ctx.stroke()
		
	# Draw articulations
	obj = Path2D.new()
	obj.arc(0, 0, 12, 0, 2*np.pi)
	ctx.lineWidth = '4'
	ctx.strokeStyle = 'white'
	for i in range(param.nbVarX+2):
		ctx.translate(f[0,i], f[1,i])
		ctx.stroke(obj)
		if ctx.isPointInPath(obj, mouse0[0], mouse0[1]) and i>0:
			if i<4:
				hover_joint = 3-i
			else:
				hover_joint = i-1
		ctx.translate(-f[0,i], -f[1,i])


def draw_object(xobj, id, color):
	global selected_obj
	ctx.setTransform(1, 0, 0, -1, canvas.width*0.5, canvas.height*0.9)
	# Draw object
	obj = Path2D.new()
	obj.arc(0, 0, 22, 0, 2*np.pi)
	ctx.translate(xobj[0], xobj[1])
	ctx.fillStyle = color
	ctx.fill(obj)
	if ctx.isPointInPath(obj, mouse0[0], mouse0[1]) and mousedown==1:
		selected_obj = id
	

def controlCommand(x, param):
	f = fkin(x, param)
	J = Jkin(x, param)
	u = np.linalg.pinv(J) @ (param.Mu - f[:,0]) * 10
	u = np.zeros(param.nbVarX)
	return u
	
#########################################################################################
 
def errorHandler(e):
	msg = 'Error: ' + str(e)
	console.error(msg)
	el = document.getElementById('repl-err')
	el.innerText = msg
	#el.textContent = msg
	
#########################################################################################
x = np.array([np.pi/2, np.pi/2, np.pi/4, -np.pi/2, -np.pi/4]) # Initial robot state
u = np.zeros(param.nbVarX)

while True:
	
	try:
		u = controlCommand(x, param)
	except Exception as e:
		errorHandler(e)
		#u = np.zeros(param.nbVarX)
		def controlCommand(x, param):
			u = np.zeros(param.nbVarX)
			return u
	
	x += u * param.dt
			
	# Reinit hovering variables
	hover_joint = -1

	# Rendering
	clear_screen()
	#draw_ground()
	draw_robot(x, '#AAAAAA')
	draw_object(param.Mu[:2], 0, '#FF3399')
	draw_object(param.Mu[2:], 1, '#FF9933')
	
	# Object selection
	if selected_obj==0:
		param.Mu[:2] = mouse[:2]
	if selected_obj==1:
		param.Mu[2:] = mouse[:2]

	await asyncio.sleep(0.0001)

</py-script>

</div> <!--container-->
</body>
</html>

